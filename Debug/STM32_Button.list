
STM32_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002448  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800273c  0800273c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800273c  0800273c  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002744  08002744  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800274c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  080027bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080027bc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009752  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f83  00000000  00000000  000297f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002dba  00000000  00000000  0002b775  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000678  00000000  00000000  0002e530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000958  00000000  00000000  0002eba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000167a0  00000000  00000000  0002f500  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00007a3f  00000000  00000000  00045ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00085423  00000000  00000000  0004d6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d2b02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018bc  00000000  00000000  000d2b80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080025d0 	.word	0x080025d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080025d0 	.word	0x080025d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Button_Add>:
static uint8_t Button_Count = 0;

extern uint32_t Button_Get_Tick();

uint8_t Button_Add(Button_Struct_t *handle)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
    if (Button_Count < MAX_BUTTONS)
 8000582:	4d0c      	ldr	r5, [pc, #48]	; (80005b4 <Button_Add+0x34>)
 8000584:	782b      	ldrb	r3, [r5, #0]
 8000586:	2b04      	cmp	r3, #4
 8000588:	d810      	bhi.n	80005ac <Button_Add+0x2c>
    {
        if (handle->Button_Init)
 800058a:	6902      	ldr	r2, [r0, #16]
 800058c:	4604      	mov	r4, r0
 800058e:	b10a      	cbz	r2, 8000594 <Button_Add+0x14>
        {
            handle->Button_Init();
 8000590:	4790      	blx	r2
 8000592:	782b      	ldrb	r3, [r5, #0]
        handle->Button_Clicked_Count = 0;
        handle->Button_Event = Button_Idle;
        handle->Button_Pressed_Ticks = 0;
        handle->Button_Released_Ticks = 0;

        Button_List[Button_Count] = handle;
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <Button_Add+0x38>)
        handle->Button_Clicked_Count = 0;
 8000596:	2200      	movs	r2, #0

        Button_Count++;
 8000598:	1c59      	adds	r1, r3, #1
        handle->Button_Clicked_Count = 0;
 800059a:	7322      	strb	r2, [r4, #12]
        Button_List[Button_Count] = handle;
 800059c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        handle->Button_Event = Button_Idle;
 80005a0:	7022      	strb	r2, [r4, #0]
        handle->Button_Released_Ticks = 0;
 80005a2:	e9c4 2201 	strd	r2, r2, [r4, #4]
        Button_Count++;
 80005a6:	7029      	strb	r1, [r5, #0]
    else
    {
        //error
        return (255); //return error
    }
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	bd38      	pop	{r3, r4, r5, pc}
        return (255); //return error
 80005ac:	23ff      	movs	r3, #255	; 0xff
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd38      	pop	{r3, r4, r5, pc}
 80005b2:	bf00      	nop
 80005b4:	2000008c 	.word	0x2000008c
 80005b8:	20000090 	.word	0x20000090

080005bc <Button_Loop>:
/**
 * called every tick (BUTTON_SCAN_TICK ?)
 * should be called at least every 20ms?
 **/
void Button_Loop()
{
 80005bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    static uint32_t Button_Scan_Time_Stamp = 0;
    Button_Struct_t *handle = NULL;

    if (Button_Get_Tick() - Button_Scan_Time_Stamp > (BUTTON_SCAN_TICK - 1)) // excute this loop on every BUTTON_SCAN_TICK
 80005c0:	4c30      	ldr	r4, [pc, #192]	; (8000684 <Button_Loop+0xc8>)
 80005c2:	f000 f8a9 	bl	8000718 <Button_Get_Tick>
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	1ac0      	subs	r0, r0, r3
 80005ca:	2809      	cmp	r0, #9
 80005cc:	d801      	bhi.n	80005d2 <Button_Loop+0x16>
                    }
                }
            }
        }
    }
}
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (uint8_t Index = 0; Index < Button_Count; Index++)
 80005d2:	4e2d      	ldr	r6, [pc, #180]	; (8000688 <Button_Loop+0xcc>)
        Button_Scan_Time_Stamp = Button_Get_Tick();
 80005d4:	f000 f8a0 	bl	8000718 <Button_Get_Tick>
        for (uint8_t Index = 0; Index < Button_Count; Index++)
 80005d8:	7833      	ldrb	r3, [r6, #0]
        Button_Scan_Time_Stamp = Button_Get_Tick();
 80005da:	6020      	str	r0, [r4, #0]
        for (uint8_t Index = 0; Index < Button_Count; Index++)
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0f6      	beq.n	80005ce <Button_Loop+0x12>
 80005e0:	2500      	movs	r5, #0
 80005e2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800068c <Button_Loop+0xd0>
                        handle->Button_Event = Button_Idle;
 80005e6:	462f      	mov	r7, r5
                    handle->Button_Event = Button_Long_Pressed;
 80005e8:	f04f 0a03 	mov.w	sl, #3
                    handle->Button_Clicked_Count = 0xFF; //0xFF for long press
 80005ec:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80005f0:	e010      	b.n	8000614 <Button_Loop+0x58>
                handle->Button_Pressed_Ticks++; //
 80005f2:	6863      	ldr	r3, [r4, #4]
 80005f4:	3301      	adds	r3, #1
                if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_DELAY)
 80005f6:	2b63      	cmp	r3, #99	; 0x63
                handle->Button_Pressed_Ticks++; //
 80005f8:	6063      	str	r3, [r4, #4]
                if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_DELAY)
 80005fa:	d82f      	bhi.n	800065c <Button_Loop+0xa0>
                    if (handle->Button_Released_Ticks < BUTTON_REPRESSED_DELAY)
 80005fc:	68a3      	ldr	r3, [r4, #8]
                    handle->Button_Released_Ticks = 0;
 80005fe:	60a7      	str	r7, [r4, #8]
                        handle->Button_Event = Button_Pressed;
 8000600:	2b0f      	cmp	r3, #15
 8000602:	bf34      	ite	cc
 8000604:	2302      	movcc	r3, #2
 8000606:	2301      	movcs	r3, #1
 8000608:	7023      	strb	r3, [r4, #0]
        for (uint8_t Index = 0; Index < Button_Count; Index++)
 800060a:	3501      	adds	r5, #1
 800060c:	7833      	ldrb	r3, [r6, #0]
 800060e:	b2ed      	uxtb	r5, r5
 8000610:	42ab      	cmp	r3, r5
 8000612:	d9dc      	bls.n	80005ce <Button_Loop+0x12>
            handle = Button_List[Index];
 8000614:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
            if (handle->Button_Read && handle->Button_Read()) //pressed detected
 8000618:	6963      	ldr	r3, [r4, #20]
 800061a:	b113      	cbz	r3, 8000622 <Button_Loop+0x66>
 800061c:	4798      	blx	r3
 800061e:	2800      	cmp	r0, #0
 8000620:	d1e7      	bne.n	80005f2 <Button_Loop+0x36>
                if (handle->Button_Pressed_Ticks > BUTTON_DEBOUNCE_DELAY) //if button was pressed for BUTTON_DEBOUNCE_DELAY
 8000622:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
                handle->Button_Released_Ticks++;
 8000626:	3301      	adds	r3, #1
                if (handle->Button_Pressed_Ticks > BUTTON_DEBOUNCE_DELAY) //if button was pressed for BUTTON_DEBOUNCE_DELAY
 8000628:	2a05      	cmp	r2, #5
                handle->Button_Released_Ticks++;
 800062a:	60a3      	str	r3, [r4, #8]
                if (handle->Button_Pressed_Ticks > BUTTON_DEBOUNCE_DELAY) //if button was pressed for BUTTON_DEBOUNCE_DELAY
 800062c:	d908      	bls.n	8000640 <Button_Loop+0x84>
                    if (handle->Button_Event == Button_Repressed)
 800062e:	7822      	ldrb	r2, [r4, #0]
                    handle->Button_Pressed_Ticks = 0;
 8000630:	6067      	str	r7, [r4, #4]
                    if (handle->Button_Event == Button_Repressed)
 8000632:	2a02      	cmp	r2, #2
 8000634:	d020      	beq.n	8000678 <Button_Loop+0xbc>
                    else if (handle->Button_Event == Button_Pressed)
 8000636:	2a01      	cmp	r2, #1
 8000638:	d022      	beq.n	8000680 <Button_Loop+0xc4>
                    else if (handle->Button_Event == Button_Long_Pressed)
 800063a:	2a03      	cmp	r2, #3
                        handle->Button_Event = Button_Idle;
 800063c:	bf08      	it	eq
 800063e:	7027      	strbeq	r7, [r4, #0]
                if (handle->Button_Released_Ticks > BUTTON_CLICKED_DELAY)
 8000640:	2b19      	cmp	r3, #25
 8000642:	d9e2      	bls.n	800060a <Button_Loop+0x4e>
                    if (handle->Callback != NULL && handle->Button_Event != Button_Idle)
 8000644:	69a3      	ldr	r3, [r4, #24]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0df      	beq.n	800060a <Button_Loop+0x4e>
 800064a:	7822      	ldrb	r2, [r4, #0]
 800064c:	2a00      	cmp	r2, #0
 800064e:	d0dc      	beq.n	800060a <Button_Loop+0x4e>
                        handle->Button_Count_Captured = handle->Button_Clicked_Count;
 8000650:	7b20      	ldrb	r0, [r4, #12]
                        handle->Button_Event = Button_Idle;
 8000652:	7027      	strb	r7, [r4, #0]
                        handle->Button_Count_Captured = handle->Button_Clicked_Count;
 8000654:	7360      	strb	r0, [r4, #13]
                        handle->Callback(handle->Button_Clicked_Count);
 8000656:	4798      	blx	r3
                        handle->Button_Clicked_Count = 0;
 8000658:	7327      	strb	r7, [r4, #12]
 800065a:	e7d6      	b.n	800060a <Button_Loop+0x4e>
                else if (handle->Button_Event != Button_Long_Pressed)
 800065c:	7823      	ldrb	r3, [r4, #0]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d0d3      	beq.n	800060a <Button_Loop+0x4e>
                    if (handle->Callback != NULL)
 8000662:	69a3      	ldr	r3, [r4, #24]
                    handle->Button_Event = Button_Long_Pressed;
 8000664:	f884 a000 	strb.w	sl, [r4]
                    handle->Button_Clicked_Count = 0xFF; //0xFF for long press
 8000668:	f8a4 900c 	strh.w	r9, [r4, #12]
                    if (handle->Callback != NULL)
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0cc      	beq.n	800060a <Button_Loop+0x4e>
                        handle->Callback(handle->Button_Clicked_Count);
 8000670:	20ff      	movs	r0, #255	; 0xff
 8000672:	4798      	blx	r3
                        handle->Button_Clicked_Count = 0;
 8000674:	7327      	strb	r7, [r4, #12]
 8000676:	e7c8      	b.n	800060a <Button_Loop+0x4e>
                        handle->Button_Clicked_Count++;
 8000678:	7b22      	ldrb	r2, [r4, #12]
 800067a:	3201      	adds	r2, #1
 800067c:	7322      	strb	r2, [r4, #12]
 800067e:	e7df      	b.n	8000640 <Button_Loop+0x84>
                        handle->Button_Clicked_Count = 1;
 8000680:	7322      	strb	r2, [r4, #12]
 8000682:	e7dd      	b.n	8000640 <Button_Loop+0x84>
 8000684:	200000a4 	.word	0x200000a4
 8000688:	2000008c 	.word	0x2000008c
 800068c:	20000090 	.word	0x20000090

08000690 <Button_Get_Clicked_Count>:

uint8_t Button_Get_Clicked_Count(Button_Struct_t *handle)
{
    uint8_t count = 0;

    if (handle != NULL)
 8000690:	4603      	mov	r3, r0
 8000692:	b118      	cbz	r0, 800069c <Button_Get_Clicked_Count+0xc>
    {
        if (handle->Button_Event == Button_Idle || handle->Button_Event == Button_Long_Pressed)
 8000694:	7802      	ldrb	r2, [r0, #0]
 8000696:	b11a      	cbz	r2, 80006a0 <Button_Get_Clicked_Count+0x10>
 8000698:	2a03      	cmp	r2, #3
 800069a:	d001      	beq.n	80006a0 <Button_Get_Clicked_Count+0x10>
    uint8_t count = 0;
 800069c:	2000      	movs	r0, #0
            handle->Button_Count_Captured = 0;
        }
    }

    return count;
}
 800069e:	4770      	bx	lr
            handle->Button_Count_Captured = 0;
 80006a0:	2200      	movs	r2, #0
            count = handle->Button_Count_Captured;
 80006a2:	7b58      	ldrb	r0, [r3, #13]
            handle->Button_Count_Captured = 0;
 80006a4:	735a      	strb	r2, [r3, #13]
 80006a6:	4770      	bx	lr

080006a8 <Button_A_Init>:
}

void Button_A_Init()
{
    //see gpio.c B1
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <Button_B_Read>:
    return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ? 0 : 1;
}
uint8_t Button_B_Read()
{ //not used
    return 0;
}
 80006ac:	2000      	movs	r0, #0
 80006ae:	4770      	bx	lr

080006b0 <Button_A_Callback>:
    }
    {
        printf("Button_A clicked %d times\n", clicked_count);
    }
#endif
}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <Button_A_Read>:
{
 80006b4:	b508      	push	{r3, lr}
    return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ? 0 : 1;
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <Button_A_Read+0x14>)
 80006bc:	f000 fbda 	bl	8000e74 <HAL_GPIO_ReadPin>
}
 80006c0:	fab0 f080 	clz	r0, r0
 80006c4:	0940      	lsrs	r0, r0, #5
 80006c6:	bd08      	pop	{r3, pc}
 80006c8:	40020800 	.word	0x40020800

080006cc <Button_B_Callback>:
void Button_B_Callback(uint8_t clicked_count)
{
    printf("Button_B clicked %d times\n", clicked_count);
 80006cc:	4601      	mov	r1, r0
 80006ce:	4801      	ldr	r0, [pc, #4]	; (80006d4 <Button_B_Callback+0x8>)
 80006d0:	f000 bf80 	b.w	80015d4 <iprintf>
 80006d4:	080025e8 	.word	0x080025e8

080006d8 <Button_C_Callback>:
}
void Button_C_Callback(uint8_t clicked_count)
{
    printf("Button_C clicked %d times\n", clicked_count);
 80006d8:	4601      	mov	r1, r0
 80006da:	4801      	ldr	r0, [pc, #4]	; (80006e0 <Button_C_Callback+0x8>)
 80006dc:	f000 bf7a 	b.w	80015d4 <iprintf>
 80006e0:	08002604 	.word	0x08002604

080006e4 <Button_D_Callback>:
}
void Button_D_Callback(uint8_t clicked_count)
{
    printf("Button_D clicked %d times\n", clicked_count);
 80006e4:	4601      	mov	r1, r0
 80006e6:	4801      	ldr	r0, [pc, #4]	; (80006ec <Button_D_Callback+0x8>)
 80006e8:	f000 bf74 	b.w	80015d4 <iprintf>
 80006ec:	08002620 	.word	0x08002620

080006f0 <Button_E_Callback>:
}
void Button_E_Callback(uint8_t clicked_count)
{
    printf("Button_E clicked %d times\n", clicked_count);
 80006f0:	4601      	mov	r1, r0
 80006f2:	4801      	ldr	r0, [pc, #4]	; (80006f8 <Button_E_Callback+0x8>)
 80006f4:	f000 bf6e 	b.w	80015d4 <iprintf>
 80006f8:	0800263c 	.word	0x0800263c

080006fc <Button_E_Read>:
 80006fc:	2000      	movs	r0, #0
 80006fe:	4770      	bx	lr

08000700 <Button_C_Read>:
 8000700:	2000      	movs	r0, #0
 8000702:	4770      	bx	lr

08000704 <Button_D_Read>:
 8000704:	2000      	movs	r0, #0
 8000706:	4770      	bx	lr

08000708 <Button_B_Init>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <Button_C_Init>:
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop

08000710 <Button_D_Init>:
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop

08000714 <Button_E_Init>:
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <Button_Get_Tick>:
    return HAL_GetTick();
 8000718:	f000 ba6e 	b.w	8000bf8 <HAL_GetTick>

0800071c <__io_putchar>:
    huart2.Instance->DR = (ch);
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <__io_putchar+0x10>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	6050      	str	r0, [r2, #4]
    while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) == 0)
 8000722:	6813      	ldr	r3, [r2, #0]
 8000724:	065b      	lsls	r3, r3, #25
 8000726:	d5fc      	bpl.n	8000722 <__io_putchar+0x6>
}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000140 	.word	0x20000140

08000730 <Button_Main>:
}

void Button_Main()
{
 8000730:	b570      	push	{r4, r5, r6, lr}
    uint8_t clicked_count_a = 0;
    /* io buffer off*/
    /* redirect printf to uart */
    setvbuf(stdout, NULL, _IONBF, 0);
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <Button_Main+0xa4>)

    Button_A.Button_Init = Button_A_Init;
 8000734:	4c28      	ldr	r4, [pc, #160]	; (80007d8 <Button_Main+0xa8>)
    setvbuf(stdout, NULL, _IONBF, 0);
 8000736:	681b      	ldr	r3, [r3, #0]
        clicked_count_a = Button_Get_Clicked_Count(&Button_A);
        if (clicked_count_a)
        {
            if (clicked_count_a == 255)
            {
                printf("Button_A long pressed\n");
 8000738:	4e28      	ldr	r6, [pc, #160]	; (80007dc <Button_Main+0xac>)
    setvbuf(stdout, NULL, _IONBF, 0);
 800073a:	6898      	ldr	r0, [r3, #8]
            }
            {
                printf("Button_A clicked %d times\n", clicked_count_a);
 800073c:	4d28      	ldr	r5, [pc, #160]	; (80007e0 <Button_Main+0xb0>)
    setvbuf(stdout, NULL, _IONBF, 0);
 800073e:	2300      	movs	r3, #0
{
 8000740:	b082      	sub	sp, #8
    setvbuf(stdout, NULL, _IONBF, 0);
 8000742:	4619      	mov	r1, r3
 8000744:	2202      	movs	r2, #2
 8000746:	f000 ffc1 	bl	80016cc <setvbuf>
    Button_A.Button_Read = Button_A_Read;
 800074a:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <Button_Main+0xb4>)
    Button_A.Callback = Button_A_Callback;
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <Button_Main+0xb8>)
    Button_A.Button_Init = Button_A_Init;
 800074e:	4927      	ldr	r1, [pc, #156]	; (80007ec <Button_Main+0xbc>)
 8000750:	6121      	str	r1, [r4, #16]
    Button_Add(&Button_A);
 8000752:	4620      	mov	r0, r4
    Button_A.Callback = Button_A_Callback;
 8000754:	e9c4 2305 	strd	r2, r3, [r4, #20]
    Button_Add(&Button_A);
 8000758:	f7ff ff12 	bl	8000580 <Button_Add>
    Button_B.Button_Init = Button_B_Init;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <Button_Main+0xc0>)
    Button_B.Button_Read = Button_B_Read;
 800075e:	4925      	ldr	r1, [pc, #148]	; (80007f4 <Button_Main+0xc4>)
    Button_B.Callback = Button_B_Callback;
 8000760:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <Button_Main+0xc8>)
    Button_B.Button_Init = Button_B_Init;
 8000762:	4826      	ldr	r0, [pc, #152]	; (80007fc <Button_Main+0xcc>)
 8000764:	6118      	str	r0, [r3, #16]
    Button_Add(&Button_B);
 8000766:	4618      	mov	r0, r3
    Button_B.Callback = Button_B_Callback;
 8000768:	e9c3 1205 	strd	r1, r2, [r3, #20]
    Button_Add(&Button_B);
 800076c:	f7ff ff08 	bl	8000580 <Button_Add>
    Button_C.Button_Init = Button_C_Init;
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <Button_Main+0xd0>)
    Button_C.Button_Read = Button_C_Read;
 8000772:	4924      	ldr	r1, [pc, #144]	; (8000804 <Button_Main+0xd4>)
    Button_C.Callback = Button_C_Callback;
 8000774:	4a24      	ldr	r2, [pc, #144]	; (8000808 <Button_Main+0xd8>)
    Button_C.Button_Init = Button_C_Init;
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <Button_Main+0xdc>)
 8000778:	6118      	str	r0, [r3, #16]
    Button_Add(&Button_C);
 800077a:	4618      	mov	r0, r3
    Button_C.Callback = Button_C_Callback;
 800077c:	e9c3 1205 	strd	r1, r2, [r3, #20]
    Button_Add(&Button_C);
 8000780:	f7ff fefe 	bl	8000580 <Button_Add>
    Button_D.Button_Init = Button_D_Init;
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <Button_Main+0xe0>)
    Button_D.Button_Read = Button_D_Read;
 8000786:	4923      	ldr	r1, [pc, #140]	; (8000814 <Button_Main+0xe4>)
    Button_D.Callback = Button_D_Callback;
 8000788:	4a23      	ldr	r2, [pc, #140]	; (8000818 <Button_Main+0xe8>)
    Button_D.Button_Init = Button_D_Init;
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <Button_Main+0xec>)
 800078c:	6118      	str	r0, [r3, #16]
    Button_Add(&Button_D);
 800078e:	4618      	mov	r0, r3
    Button_D.Callback = Button_D_Callback;
 8000790:	e9c3 1205 	strd	r1, r2, [r3, #20]
    Button_Add(&Button_D);
 8000794:	f7ff fef4 	bl	8000580 <Button_Add>
    Button_E.Button_Init = Button_E_Init;
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <Button_Main+0xf0>)
 800079a:	4822      	ldr	r0, [pc, #136]	; (8000824 <Button_Main+0xf4>)
    Button_E.Button_Read = Button_E_Read;
 800079c:	4922      	ldr	r1, [pc, #136]	; (8000828 <Button_Main+0xf8>)
    Button_E.Callback = Button_E_Callback;
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <Button_Main+0xfc>)
    Button_E.Button_Init = Button_E_Init;
 80007a0:	6118      	str	r0, [r3, #16]
    Button_Add(&Button_E);
 80007a2:	4618      	mov	r0, r3
    Button_E.Callback = Button_E_Callback;
 80007a4:	e9c3 1205 	strd	r1, r2, [r3, #20]
    Button_Add(&Button_E);
 80007a8:	f7ff feea 	bl	8000580 <Button_Add>
        Button_Loop();
 80007ac:	f7ff ff06 	bl	80005bc <Button_Loop>
        clicked_count_a = Button_Get_Clicked_Count(&Button_A);
 80007b0:	4620      	mov	r0, r4
 80007b2:	f7ff ff6d 	bl	8000690 <Button_Get_Clicked_Count>
        if (clicked_count_a)
 80007b6:	4601      	mov	r1, r0
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d0f7      	beq.n	80007ac <Button_Main+0x7c>
            if (clicked_count_a == 255)
 80007bc:	28ff      	cmp	r0, #255	; 0xff
 80007be:	d003      	beq.n	80007c8 <Button_Main+0x98>
                printf("Button_A clicked %d times\n", clicked_count_a);
 80007c0:	4628      	mov	r0, r5
 80007c2:	f000 ff07 	bl	80015d4 <iprintf>
 80007c6:	e7f1      	b.n	80007ac <Button_Main+0x7c>
 80007c8:	9001      	str	r0, [sp, #4]
                printf("Button_A long pressed\n");
 80007ca:	4630      	mov	r0, r6
 80007cc:	f000 ff76 	bl	80016bc <puts>
 80007d0:	9901      	ldr	r1, [sp, #4]
 80007d2:	e7f5      	b.n	80007c0 <Button_Main+0x90>
 80007d4:	2000000c 	.word	0x2000000c
 80007d8:	20000108 	.word	0x20000108
 80007dc:	08002658 	.word	0x08002658
 80007e0:	08002670 	.word	0x08002670
 80007e4:	080006b5 	.word	0x080006b5
 80007e8:	080006b1 	.word	0x080006b1
 80007ec:	080006a9 	.word	0x080006a9
 80007f0:	200000ec 	.word	0x200000ec
 80007f4:	080006ad 	.word	0x080006ad
 80007f8:	080006cd 	.word	0x080006cd
 80007fc:	08000709 	.word	0x08000709
 8000800:	200000b4 	.word	0x200000b4
 8000804:	08000701 	.word	0x08000701
 8000808:	080006d9 	.word	0x080006d9
 800080c:	0800070d 	.word	0x0800070d
 8000810:	20000124 	.word	0x20000124
 8000814:	08000705 	.word	0x08000705
 8000818:	080006e5 	.word	0x080006e5
 800081c:	08000711 	.word	0x08000711
 8000820:	200000d0 	.word	0x200000d0
 8000824:	08000715 	.word	0x08000715
 8000828:	080006fd 	.word	0x080006fd
 800082c:	080006f1 	.word	0x080006f1

08000830 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000830:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	2400      	movs	r4, #0
{
 8000834:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800083a:	e9cd 4405 	strd	r4, r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_GPIO_Init+0x74>)
 8000840:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000846:	4d18      	ldr	r5, [pc, #96]	; (80008a8 <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000848:	f042 0204 	orr.w	r2, r2, #4
 800084c:	631a      	str	r2, [r3, #48]	; 0x30
 800084e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000850:	f002 0204 	and.w	r2, r2, #4
 8000854:	9201      	str	r2, [sp, #4]
 8000856:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	9402      	str	r4, [sp, #8]
 800085a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800085c:	f042 0201 	orr.w	r2, r2, #1
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	4622      	mov	r2, r4
 800086c:	4628      	mov	r0, r5
 800086e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	f000 fb05 	bl	8000e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_GPIO_Init+0x7c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_GPIO_Init+0x80>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = B1_Pin;
 800087e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000882:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f000 fa1f 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800088a:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088e:	a903      	add	r1, sp, #12
 8000890:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800089a:	f000 fa15 	bl	8000cc8 <HAL_GPIO_Init>

}
 800089e:	b009      	add	sp, #36	; 0x24
 80008a0:	bd30      	pop	{r4, r5, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	10210000 	.word	0x10210000
 80008b0:	40020800 	.word	0x40020800

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	2400      	movs	r4, #0
{
 80008b8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80008be:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80008c6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <SystemClock_Config+0x8c>)
 80008cc:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80008da:	6419      	str	r1, [r3, #64]	; 0x40
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e6:	9402      	str	r4, [sp, #8]
 80008e8:	6813      	ldr	r3, [r2, #0]
 80008ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000902:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000904:	f44f 71a8 	mov.w	r1, #336	; 0x150
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000908:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800090e:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000910:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000914:	2307      	movs	r3, #7
 8000916:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091a:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f000 fab2 	bl	8000e88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	a803      	add	r0, sp, #12
 800092c:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000932:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000936:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000938:	f000 fcba 	bl	80012b0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800093c:	b015      	add	sp, #84	; 0x54
 800093e:	bd30      	pop	{r4, r5, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <main>:
{
 8000948:	b508      	push	{r3, lr}
  HAL_Init();
 800094a:	f000 f92f 	bl	8000bac <HAL_Init>
  SystemClock_Config();
 800094e:	f7ff ffb1 	bl	80008b4 <SystemClock_Config>
  MX_GPIO_Init();
 8000952:	f7ff ff6d 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000956:	f000 f88b 	bl	8000a70 <MX_USART2_UART_Init>
  Button_Main();
 800095a:	f7ff fee9 	bl	8000730 <Button_Main>
 800095e:	e7fe      	b.n	800095e <main+0x16>

08000960 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_MspInit+0x38>)
 8000968:	2100      	movs	r1, #0
 800096a:	9100      	str	r1, [sp, #0]
 800096c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800096e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000972:	645a      	str	r2, [r3, #68]	; 0x44
 8000974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000976:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800097a:	9200      	str	r2, [sp, #0]
 800097c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	9101      	str	r1, [sp, #4]
 8000980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000982:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000986:	641a      	str	r2, [r3, #64]	; 0x40
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000992:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000994:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	f000 b935 	b.w	8000c04 <HAL_NVIC_SetPriorityGrouping>
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	e7fe      	b.n	80009a4 <HardFault_Handler>
 80009a6:	bf00      	nop

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler>
 80009aa:	bf00      	nop

080009ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ac:	e7fe      	b.n	80009ac <BusFault_Handler>
 80009ae:	bf00      	nop

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler>
 80009b2:	bf00      	nop

080009b4 <SVC_Handler>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <DebugMon_Handler>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <PendSV_Handler>:
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 b90e 	b.w	8000be0 <HAL_IncTick>

080009c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	1e16      	subs	r6, r2, #0
 80009c8:	dd07      	ble.n	80009da <_read+0x16>
 80009ca:	460c      	mov	r4, r1
 80009cc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80009ce:	f3af 8000 	nop.w
 80009d2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	42a5      	cmp	r5, r4
 80009d8:	d1f9      	bne.n	80009ce <_read+0xa>
	}

return len;
}
 80009da:	4630      	mov	r0, r6
 80009dc:	bd70      	pop	{r4, r5, r6, pc}
 80009de:	bf00      	nop

080009e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	1e16      	subs	r6, r2, #0
 80009e4:	dd07      	ble.n	80009f6 <_write+0x16>
 80009e6:	460c      	mov	r4, r1
 80009e8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80009ea:	f814 0b01 	ldrb.w	r0, [r4], #1
 80009ee:	f7ff fe95 	bl	800071c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	42ac      	cmp	r4, r5
 80009f4:	d1f9      	bne.n	80009ea <_write+0xa>
	}
	return len;
}
 80009f6:	4630      	mov	r0, r6
 80009f8:	bd70      	pop	{r4, r5, r6, pc}
 80009fa:	bf00      	nop

080009fc <_close>:

int _close(int file)
{
	return -1;
}
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a08:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000a10:	2001      	movs	r0, #1
 8000a12:	4770      	bx	lr

08000a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000a14:	2000      	movs	r0, #0
 8000a16:	4770      	bx	lr

08000a18 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <_sbrk+0x34>)
{
 8000a1a:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8000a1c:	6813      	ldr	r3, [r2, #0]
 8000a1e:	b133      	cbz	r3, 8000a2e <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000a20:	4418      	add	r0, r3
 8000a22:	4669      	mov	r1, sp
 8000a24:	4288      	cmp	r0, r1
 8000a26:	d808      	bhi.n	8000a3a <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000a28:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x38>)
 8000a30:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000a32:	4418      	add	r0, r3
 8000a34:	4669      	mov	r1, sp
 8000a36:	4288      	cmp	r0, r1
 8000a38:	d9f6      	bls.n	8000a28 <_sbrk+0x10>
		errno = ENOMEM;
 8000a3a:	f000 fd99 	bl	8001570 <__errno>
 8000a3e:	230c      	movs	r3, #12
 8000a40:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd08      	pop	{r3, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000a8 	.word	0x200000a8
 8000a50:	20000188 	.word	0x20000188

08000a54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SystemInit+0x18>)
 8000a56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a66:	6099      	str	r1, [r3, #8]
#endif
}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART2_UART_Init+0x30>)
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <MX_USART2_UART_Init+0x34>)
{
 8000a74:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a76:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8000a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a7a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a80:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8000a82:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a86:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a90:	f000 fccc 	bl	800142c <HAL_UART_Init>
 8000a94:	b900      	cbnz	r0, 8000a98 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8000a96:	bd10      	pop	{r4, pc}
 8000a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000a9c:	f7ff bf60 	b.w	8000960 <Error_Handler>
 8000aa0:	20000140 	.word	0x20000140
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8000aaa:	6801      	ldr	r1, [r0, #0]
 8000aac:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <HAL_UART_MspInit+0x60>)
{
 8000aae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 8000ab2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000ab8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000abc:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000abe:	d001      	beq.n	8000ac4 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ac0:	b009      	add	sp, #36	; 0x24
 8000ac2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac4:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	480f      	ldr	r0, [pc, #60]	; (8000b0c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ace:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000ad2:	6411      	str	r1, [r2, #64]	; 0x40
 8000ad4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ad6:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8000ada:	9101      	str	r1, [sp, #4]
 8000adc:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	9302      	str	r3, [sp, #8]
 8000ae0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af6:	240c      	movs	r4, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f000 f8e2 	bl	8000cc8 <HAL_GPIO_Init>
}
 8000b04:	b009      	add	sp, #36	; 0x24
 8000b06:	bd30      	pop	{r4, r5, pc}
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40020000 	.word	0x40020000

08000b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b16:	e003      	b.n	8000b20 <LoopCopyDataInit>

08000b18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b1e:	3104      	adds	r1, #4

08000b20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b28:	d3f6      	bcc.n	8000b18 <CopyDataInit>
  ldr  r2, =_sbss
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b2c:	e002      	b.n	8000b34 <LoopFillZerobss>

08000b2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b30:	f842 3b04 	str.w	r3, [r2], #4

08000b34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b38:	d3f9      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b3a:	f7ff ff8b 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f000 fd1d 	bl	800157c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b42:	f7ff ff01 	bl	8000948 <main>
  bx  lr    
 8000b46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b48:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000b4c:	0800274c 	.word	0x0800274c
  ldr  r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b54:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b58:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b5c:	20000188 	.word	0x20000188

08000b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC_IRQHandler>
	...

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_InitTick+0x3c>)
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_InitTick+0x40>)
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
{
 8000b6e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b74:	fbb0 f0f2 	udiv	r0, r0, r2
 8000b78:	fbb3 f0f0 	udiv	r0, r3, r0
 8000b7c:	f000 f88a 	bl	8000c94 <HAL_SYSTICK_Config>
 8000b80:	b908      	cbnz	r0, 8000b86 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	2d0f      	cmp	r5, #15
 8000b84:	d901      	bls.n	8000b8a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
 8000b8a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4629      	mov	r1, r5
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f848 	bl	8000c28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_InitTick+0x44>)
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	601d      	str	r5, [r3, #0]
}
 8000b9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ba0:	20000004 	.word	0x20000004
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008

08000bac <HAL_Init>:
{
 8000bac:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_Init+0x30>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bb6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bbe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bc6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f81b 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ffc8 	bl	8000b64 <HAL_InitTick>
  HAL_MspInit();
 8000bd4:	f7ff fec6 	bl	8000964 <HAL_MspInit>
}
 8000bd8:	2000      	movs	r0, #0
 8000bda:	bd08      	pop	{r3, pc}
 8000bdc:	40023c00 	.word	0x40023c00

08000be0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <HAL_IncTick+0x10>)
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_IncTick+0x14>)
 8000be4:	6811      	ldr	r1, [r2, #0]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	440b      	add	r3, r1
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000180 	.word	0x20000180
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bf8:	4b01      	ldr	r3, [pc, #4]	; (8000c00 <HAL_GetTick+0x8>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000180 	.word	0x20000180

08000c04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c08:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000c0c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0e:	0200      	lsls	r0, r0, #8
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c1c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c1e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_NVIC_SetPriority+0x64>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c30:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c32:	f1c3 0507 	rsb	r5, r3, #7
 8000c36:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c38:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	bf28      	it	cs
 8000c3e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c40:	2c06      	cmp	r4, #6
 8000c42:	d919      	bls.n	8000c78 <HAL_NVIC_SetPriority+0x50>
 8000c44:	3b03      	subs	r3, #3
 8000c46:	f04f 34ff 	mov.w	r4, #4294967295
 8000c4a:	409c      	lsls	r4, r3
 8000c4c:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	40aa      	lsls	r2, r5
 8000c56:	ea21 0102 	bic.w	r1, r1, r2
 8000c5a:	fa01 f203 	lsl.w	r2, r1, r3
 8000c5e:	4322      	orrs	r2, r4
 8000c60:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000c62:	2800      	cmp	r0, #0
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	db0a      	blt.n	8000c7e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c6c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c70:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c74:	bc30      	pop	{r4, r5}
 8000c76:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c78:	2400      	movs	r4, #0
 8000c7a:	4623      	mov	r3, r4
 8000c7c:	e7e8      	b.n	8000c50 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_NVIC_SetPriority+0x68>)
 8000c80:	f000 000f 	and.w	r0, r0, #15
 8000c84:	4403      	add	r3, r0
 8000c86:	761a      	strb	r2, [r3, #24]
 8000c88:	bc30      	pop	{r4, r5}
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	e000ecfc 	.word	0xe000ecfc

08000c94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	3801      	subs	r0, #1
 8000c96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c9a:	d20e      	bcs.n	8000cba <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	4c08      	ldr	r4, [pc, #32]	; (8000cc4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	20f0      	movs	r0, #240	; 0xf0
 8000ca6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000caa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cac:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cae:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	4688      	mov	r8, r1
 8000cce:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd0:	f8d1 b000 	ldr.w	fp, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cd4:	f8df e198 	ldr.w	lr, [pc, #408]	; 8000e70 <HAL_GPIO_Init+0x1a8>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd8:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 8000cda:	f04f 0901 	mov.w	r9, #1
 8000cde:	e002      	b.n	8000ce6 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce0:	3401      	adds	r4, #1
 8000ce2:	2c10      	cmp	r4, #16
 8000ce4:	d077      	beq.n	8000dd6 <HAL_GPIO_Init+0x10e>
    ioposition = 0x01U << position;
 8000ce6:	fa09 f204 	lsl.w	r2, r9, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	ea0b 0302 	and.w	r3, fp, r2
    if(iocurrent == ioposition)
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d1f6      	bne.n	8000ce0 <HAL_GPIO_Init+0x18>
 8000cf2:	e9d8 2601 	ldrd	r2, r6, [r8, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf6:	f022 0c10 	bic.w	ip, r2, #16
 8000cfa:	0065      	lsls	r5, r4, #1
 8000cfc:	f10c 37ff 	add.w	r7, ip, #4294967295
 8000d00:	2103      	movs	r1, #3
 8000d02:	40a9      	lsls	r1, r5
 8000d04:	2f01      	cmp	r7, #1
 8000d06:	ea6f 0101 	mvn.w	r1, r1
 8000d0a:	fa06 f605 	lsl.w	r6, r6, r5
 8000d0e:	d965      	bls.n	8000ddc <HAL_GPIO_Init+0x114>
      temp = GPIOx->PUPDR;
 8000d10:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d12:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d14:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000d16:	60c6      	str	r6, [r0, #12]
      temp = GPIOx->MODER;
 8000d18:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1a:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1e:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d20:	fa06 f505 	lsl.w	r5, r6, r5
 8000d24:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d26:	00d7      	lsls	r7, r2, #3
      GPIOx->MODER = temp;
 8000d28:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2a:	d5d9      	bpl.n	8000ce0 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	4d4b      	ldr	r5, [pc, #300]	; (8000e5c <HAL_GPIO_Init+0x194>)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	9101      	str	r1, [sp, #4]
 8000d32:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8000d34:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000d38:	6469      	str	r1, [r5, #68]	; 0x44
 8000d3a:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8000d3c:	f024 0603 	bic.w	r6, r4, #3
 8000d40:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000d44:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000d48:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8000d4c:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d4e:	f004 0503 	and.w	r5, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	9901      	ldr	r1, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d54:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d56:	00ad      	lsls	r5, r5, #2
 8000d58:	210f      	movs	r1, #15
 8000d5a:	40a9      	lsls	r1, r5
 8000d5c:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d60:	4f3f      	ldr	r7, [pc, #252]	; (8000e60 <HAL_GPIO_Init+0x198>)
 8000d62:	42b8      	cmp	r0, r7
 8000d64:	d011      	beq.n	8000d8a <HAL_GPIO_Init+0xc2>
 8000d66:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000d6a:	42b8      	cmp	r0, r7
 8000d6c:	d068      	beq.n	8000e40 <HAL_GPIO_Init+0x178>
 8000d6e:	4f3d      	ldr	r7, [pc, #244]	; (8000e64 <HAL_GPIO_Init+0x19c>)
 8000d70:	42b8      	cmp	r0, r7
 8000d72:	d069      	beq.n	8000e48 <HAL_GPIO_Init+0x180>
 8000d74:	4f3c      	ldr	r7, [pc, #240]	; (8000e68 <HAL_GPIO_Init+0x1a0>)
 8000d76:	42b8      	cmp	r0, r7
 8000d78:	d06b      	beq.n	8000e52 <HAL_GPIO_Init+0x18a>
 8000d7a:	4f3c      	ldr	r7, [pc, #240]	; (8000e6c <HAL_GPIO_Init+0x1a4>)
 8000d7c:	42b8      	cmp	r0, r7
 8000d7e:	bf0c      	ite	eq
 8000d80:	2704      	moveq	r7, #4
 8000d82:	2707      	movne	r7, #7
 8000d84:	fa07 f505 	lsl.w	r5, r7, r5
 8000d88:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d8a:	60b1      	str	r1, [r6, #8]
        temp = EXTI->IMR;
 8000d8c:	f8de 1000 	ldr.w	r1, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d92:	03d6      	lsls	r6, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8000d94:	bf54      	ite	pl
 8000d96:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8000d98:	4319      	orrmi	r1, r3
        }
        EXTI->IMR = temp;
 8000d9a:	f8ce 1000 	str.w	r1, [lr]

        temp = EXTI->EMR;
 8000d9e:	f8de 1004 	ldr.w	r1, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da2:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8000da4:	bf54      	ite	pl
 8000da6:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8000da8:	4319      	orrmi	r1, r3
        }
        EXTI->EMR = temp;
 8000daa:	f8ce 1004 	str.w	r1, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dae:	f8de 1008 	ldr.w	r1, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db2:	02d6      	lsls	r6, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8000db4:	bf54      	ite	pl
 8000db6:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8000db8:	4319      	orrmi	r1, r3
        }
        EXTI->RTSR = temp;
 8000dba:	f8ce 1008 	str.w	r1, [lr, #8]

        temp = EXTI->FTSR;
 8000dbe:	f8de 100c 	ldr.w	r1, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc2:	0292      	lsls	r2, r2, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc4:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	bf54      	ite	pl
 8000dca:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8000dcc:	4319      	orrmi	r1, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8000dd0:	f8ce 100c 	str.w	r1, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd4:	d187      	bne.n	8000ce6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8000dd6:	b003      	add	sp, #12
 8000dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8000ddc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dde:	ea07 0a01 	and.w	sl, r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8000de6:	40af      	lsls	r7, r5
 8000de8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000dec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dee:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000df2:	f3c2 1700 	ubfx	r7, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df6:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dfa:	40a7      	lsls	r7, r4
 8000dfc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000e00:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e02:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e04:	400f      	ands	r7, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e06:	433e      	orrs	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e08:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000e0c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0e:	d183      	bne.n	8000d18 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8000e10:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 8000e14:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e18:	f004 0607 	and.w	r6, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e1c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e20:	00b6      	lsls	r6, r6, #2
 8000e22:	f04f 0c0f 	mov.w	ip, #15
 8000e26:	fa0c fc06 	lsl.w	ip, ip, r6
 8000e2a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e2e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8000e32:	fa07 f606 	lsl.w	r6, r7, r6
 8000e36:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	f8ca 6020 	str.w	r6, [sl, #32]
 8000e3e:	e76b      	b.n	8000d18 <HAL_GPIO_Init+0x50>
 8000e40:	fa09 f505 	lsl.w	r5, r9, r5
 8000e44:	4329      	orrs	r1, r5
 8000e46:	e7a0      	b.n	8000d8a <HAL_GPIO_Init+0xc2>
 8000e48:	2702      	movs	r7, #2
 8000e4a:	fa07 f505 	lsl.w	r5, r7, r5
 8000e4e:	4329      	orrs	r1, r5
 8000e50:	e79b      	b.n	8000d8a <HAL_GPIO_Init+0xc2>
 8000e52:	2703      	movs	r7, #3
 8000e54:	fa07 f505 	lsl.w	r5, r7, r5
 8000e58:	4329      	orrs	r1, r5
 8000e5a:	e796      	b.n	8000d8a <HAL_GPIO_Init+0xc2>
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020c00 	.word	0x40020c00
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40013c00 	.word	0x40013c00

08000e74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e74:	6903      	ldr	r3, [r0, #16]
 8000e76:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000e78:	bf14      	ite	ne
 8000e7a:	2001      	movne	r0, #1
 8000e7c:	2000      	moveq	r0, #0
 8000e7e:	4770      	bx	lr

08000e80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e80:	b902      	cbnz	r2, 8000e84 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e82:	0409      	lsls	r1, r1, #16
 8000e84:	6181      	str	r1, [r0, #24]
  }
}
 8000e86:	4770      	bx	lr

08000e88 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	f000 8132 	beq.w	80010f2 <HAL_RCC_OscConfig+0x26a>
{
 8000e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e92:	6803      	ldr	r3, [r0, #0]
 8000e94:	07dd      	lsls	r5, r3, #31
{
 8000e96:	b082      	sub	sp, #8
 8000e98:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	d52f      	bpl.n	8000efc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e9c:	49ac      	ldr	r1, [pc, #688]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8000e9e:	688a      	ldr	r2, [r1, #8]
 8000ea0:	f002 020c 	and.w	r2, r2, #12
 8000ea4:	2a04      	cmp	r2, #4
 8000ea6:	f000 80ea 	beq.w	800107e <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eaa:	688a      	ldr	r2, [r1, #8]
 8000eac:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eb0:	2a08      	cmp	r2, #8
 8000eb2:	f000 80e0 	beq.w	8001076 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb6:	6863      	ldr	r3, [r4, #4]
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	f000 80e9 	beq.w	8001092 <HAL_RCC_OscConfig+0x20a>
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec4:	f000 8178 	beq.w	80011b8 <HAL_RCC_OscConfig+0x330>
 8000ec8:	4da1      	ldr	r5, [pc, #644]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8000eca:	682a      	ldr	r2, [r5, #0]
 8000ecc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ed0:	602a      	str	r2, [r5, #0]
 8000ed2:	682a      	ldr	r2, [r5, #0]
 8000ed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ed8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 80de 	bne.w	800109c <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fe8a 	bl	8000bf8 <HAL_GetTick>
 8000ee4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	e005      	b.n	8000ef4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fe86 	bl	8000bf8 <HAL_GetTick>
 8000eec:	1b80      	subs	r0, r0, r6
 8000eee:	2864      	cmp	r0, #100	; 0x64
 8000ef0:	f200 80f2 	bhi.w	80010d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	039b      	lsls	r3, r3, #14
 8000ef8:	d4f6      	bmi.n	8000ee8 <HAL_RCC_OscConfig+0x60>
 8000efa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efc:	079f      	lsls	r7, r3, #30
 8000efe:	d475      	bmi.n	8000fec <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f00:	071a      	lsls	r2, r3, #28
 8000f02:	d515      	bpl.n	8000f30 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f04:	6963      	ldr	r3, [r4, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 80a5 	beq.w	8001056 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0c:	4b91      	ldr	r3, [pc, #580]	; (8001154 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	4d90      	ldr	r5, [pc, #576]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f14:	f7ff fe70 	bl	8000bf8 <HAL_GetTick>
 8000f18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1a:	e005      	b.n	8000f28 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fe6c 	bl	8000bf8 <HAL_GetTick>
 8000f20:	1b80      	subs	r0, r0, r6
 8000f22:	2802      	cmp	r0, #2
 8000f24:	f200 80d8 	bhi.w	80010d8 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f28:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f2a:	079b      	lsls	r3, r3, #30
 8000f2c:	d5f6      	bpl.n	8000f1c <HAL_RCC_OscConfig+0x94>
 8000f2e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f30:	0758      	lsls	r0, r3, #29
 8000f32:	d53b      	bpl.n	8000fac <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f34:	4a86      	ldr	r2, [pc, #536]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8000f36:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f38:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	f040 80db 	bne.w	80010f6 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f54:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f56:	4d80      	ldr	r5, [pc, #512]	; (8001158 <HAL_RCC_OscConfig+0x2d0>)
 8000f58:	682a      	ldr	r2, [r5, #0]
 8000f5a:	05d1      	lsls	r1, r2, #23
 8000f5c:	f140 80ac 	bpl.w	80010b8 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f60:	68a3      	ldr	r3, [r4, #8]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	f000 80c9 	beq.w	80010fa <HAL_RCC_OscConfig+0x272>
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	f000 812f 	beq.w	80011cc <HAL_RCC_OscConfig+0x344>
 8000f6e:	4d78      	ldr	r5, [pc, #480]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8000f70:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	672a      	str	r2, [r5, #112]	; 0x70
 8000f78:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f7a:	f022 0204 	bic.w	r2, r2, #4
 8000f7e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f040 80bf 	bne.w	8001104 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fe37 	bl	8000bf8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f8e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f90:	e006      	b.n	8000fa0 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f7ff fe31 	bl	8000bf8 <HAL_GetTick>
 8000f96:	eba0 0008 	sub.w	r0, r0, r8
 8000f9a:	42b8      	cmp	r0, r7
 8000f9c:	f200 809c 	bhi.w	80010d8 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fa2:	0798      	lsls	r0, r3, #30
 8000fa4:	d4f5      	bmi.n	8000f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	f040 80dc 	bne.w	8001164 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fac:	69a0      	ldr	r0, [r4, #24]
 8000fae:	b1c8      	cbz	r0, 8000fe4 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fb0:	4d67      	ldr	r5, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8000fb2:	68aa      	ldr	r2, [r5, #8]
 8000fb4:	f002 020c 	and.w	r2, r2, #12
 8000fb8:	2a08      	cmp	r2, #8
 8000fba:	f000 80d9 	beq.w	8001170 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbe:	4a67      	ldr	r2, [pc, #412]	; (800115c <HAL_RCC_OscConfig+0x2d4>)
 8000fc0:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000fc4:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc6:	f000 810b 	beq.w	80011e0 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fe15 	bl	8000bf8 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fce:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000fd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd2:	e004      	b.n	8000fde <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd4:	f7ff fe10 	bl	8000bf8 <HAL_GetTick>
 8000fd8:	1b40      	subs	r0, r0, r5
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d87c      	bhi.n	80010d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	019b      	lsls	r3, r3, #6
 8000fe2:	d4f7      	bmi.n	8000fd4 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000fe4:	2000      	movs	r0, #0
}
 8000fe6:	b002      	add	sp, #8
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fec:	4a58      	ldr	r2, [pc, #352]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8000fee:	6891      	ldr	r1, [r2, #8]
 8000ff0:	f011 0f0c 	tst.w	r1, #12
 8000ff4:	d024      	beq.n	8001040 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff6:	6891      	ldr	r1, [r2, #8]
 8000ff8:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffc:	2908      	cmp	r1, #8
 8000ffe:	d01c      	beq.n	800103a <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001000:	68e3      	ldr	r3, [r4, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8092 	beq.w	800112c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8001008:	4b55      	ldr	r3, [pc, #340]	; (8001160 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100a:	4d51      	ldr	r5, [pc, #324]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001010:	f7ff fdf2 	bl	8000bf8 <HAL_GetTick>
 8001014:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001016:	e004      	b.n	8001022 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fdee 	bl	8000bf8 <HAL_GetTick>
 800101c:	1b80      	subs	r0, r0, r6
 800101e:	2802      	cmp	r0, #2
 8001020:	d85a      	bhi.n	80010d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001022:	682b      	ldr	r3, [r5, #0]
 8001024:	0798      	lsls	r0, r3, #30
 8001026:	d5f7      	bpl.n	8001018 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	6922      	ldr	r2, [r4, #16]
 800102c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001030:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001034:	602b      	str	r3, [r5, #0]
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	e762      	b.n	8000f00 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103a:	6852      	ldr	r2, [r2, #4]
 800103c:	0256      	lsls	r6, r2, #9
 800103e:	d4df      	bmi.n	8001000 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001040:	4a43      	ldr	r2, [pc, #268]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	0795      	lsls	r5, r2, #30
 8001046:	d54b      	bpl.n	80010e0 <HAL_RCC_OscConfig+0x258>
 8001048:	68e2      	ldr	r2, [r4, #12]
 800104a:	2a01      	cmp	r2, #1
 800104c:	d048      	beq.n	80010e0 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800104e:	2001      	movs	r0, #1
}
 8001050:	b002      	add	sp, #8
 8001052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001056:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001058:	4d3d      	ldr	r5, [pc, #244]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800105a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800105c:	f7ff fdcc 	bl	8000bf8 <HAL_GetTick>
 8001060:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001062:	e004      	b.n	800106e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fdc8 	bl	8000bf8 <HAL_GetTick>
 8001068:	1b80      	subs	r0, r0, r6
 800106a:	2802      	cmp	r0, #2
 800106c:	d834      	bhi.n	80010d8 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800106e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001070:	079f      	lsls	r7, r3, #30
 8001072:	d4f7      	bmi.n	8001064 <HAL_RCC_OscConfig+0x1dc>
 8001074:	e75b      	b.n	8000f2e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001076:	684a      	ldr	r2, [r1, #4]
 8001078:	0250      	lsls	r0, r2, #9
 800107a:	f57f af1c 	bpl.w	8000eb6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	4a34      	ldr	r2, [pc, #208]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	0391      	lsls	r1, r2, #14
 8001084:	f57f af3a 	bpl.w	8000efc <HAL_RCC_OscConfig+0x74>
 8001088:	6862      	ldr	r2, [r4, #4]
 800108a:	2a00      	cmp	r2, #0
 800108c:	f47f af36 	bne.w	8000efc <HAL_RCC_OscConfig+0x74>
 8001090:	e7dd      	b.n	800104e <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001092:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 8001094:	6813      	ldr	r3, [r2, #0]
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800109c:	f7ff fdac 	bl	8000bf8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a0:	4d2b      	ldr	r5, [pc, #172]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80010a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	e004      	b.n	80010b0 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a6:	f7ff fda7 	bl	8000bf8 <HAL_GetTick>
 80010aa:	1b80      	subs	r0, r0, r6
 80010ac:	2864      	cmp	r0, #100	; 0x64
 80010ae:	d813      	bhi.n	80010d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	039a      	lsls	r2, r3, #14
 80010b4:	d5f7      	bpl.n	80010a6 <HAL_RCC_OscConfig+0x21e>
 80010b6:	e720      	b.n	8000efa <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b8:	682a      	ldr	r2, [r5, #0]
 80010ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010be:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80010c0:	f7ff fd9a 	bl	8000bf8 <HAL_GetTick>
 80010c4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c6:	682b      	ldr	r3, [r5, #0]
 80010c8:	05da      	lsls	r2, r3, #23
 80010ca:	f53f af49 	bmi.w	8000f60 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ce:	f7ff fd93 	bl	8000bf8 <HAL_GetTick>
 80010d2:	1bc0      	subs	r0, r0, r7
 80010d4:	2802      	cmp	r0, #2
 80010d6:	d9f6      	bls.n	80010c6 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 80010d8:	2003      	movs	r0, #3
}
 80010da:	b002      	add	sp, #8
 80010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	491b      	ldr	r1, [pc, #108]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 80010e2:	6920      	ldr	r0, [r4, #16]
 80010e4:	680a      	ldr	r2, [r1, #0]
 80010e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80010ea:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80010ee:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f0:	e706      	b.n	8000f00 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
}
 80010f4:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80010f6:	2600      	movs	r6, #0
 80010f8:	e72d      	b.n	8000f56 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
 80010fc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001104:	f7ff fd78 	bl	8000bf8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	4d11      	ldr	r5, [pc, #68]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800110a:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800110c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e005      	b.n	800111e <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fd71 	bl	8000bf8 <HAL_GetTick>
 8001116:	eba0 0008 	sub.w	r0, r0, r8
 800111a:	42b8      	cmp	r0, r7
 800111c:	d8dc      	bhi.n	80010d8 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001120:	079b      	lsls	r3, r3, #30
 8001122:	d5f6      	bpl.n	8001112 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8001124:	2e00      	cmp	r6, #0
 8001126:	f43f af41 	beq.w	8000fac <HAL_RCC_OscConfig+0x124>
 800112a:	e01b      	b.n	8001164 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 800112c:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	4d08      	ldr	r5, [pc, #32]	; (8001150 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001130:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001132:	f7ff fd61 	bl	8000bf8 <HAL_GetTick>
 8001136:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001138:	e004      	b.n	8001144 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fd5d 	bl	8000bf8 <HAL_GetTick>
 800113e:	1b80      	subs	r0, r0, r6
 8001140:	2802      	cmp	r0, #2
 8001142:	d8c9      	bhi.n	80010d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001144:	682b      	ldr	r3, [r5, #0]
 8001146:	0799      	lsls	r1, r3, #30
 8001148:	d4f7      	bmi.n	800113a <HAL_RCC_OscConfig+0x2b2>
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	e6d8      	b.n	8000f00 <HAL_RCC_OscConfig+0x78>
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	42470e80 	.word	0x42470e80
 8001158:	40007000 	.word	0x40007000
 800115c:	42470060 	.word	0x42470060
 8001160:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8001164:	4a35      	ldr	r2, [pc, #212]	; (800123c <HAL_RCC_OscConfig+0x3b4>)
 8001166:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	e71d      	b.n	8000fac <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001170:	2801      	cmp	r0, #1
 8001172:	f43f af6d 	beq.w	8001050 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8001176:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001178:	69e2      	ldr	r2, [r4, #28]
 800117a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800117e:	4291      	cmp	r1, r2
 8001180:	f47f af65 	bne.w	800104e <HAL_RCC_OscConfig+0x1c6>
 8001184:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001186:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	4291      	cmp	r1, r2
 800118c:	f47f af5f 	bne.w	800104e <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001190:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001194:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001196:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001198:	428a      	cmp	r2, r1
 800119a:	f47f af58 	bne.w	800104e <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800119e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011a0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80011a4:	4291      	cmp	r1, r2
 80011a6:	f47f af52 	bne.w	800104e <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80011ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80011b0:	1a18      	subs	r0, r3, r0
 80011b2:	bf18      	it	ne
 80011b4:	2001      	movne	r0, #1
 80011b6:	e74b      	b.n	8001050 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_RCC_OscConfig+0x3b4>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e767      	b.n	800109c <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HAL_RCC_OscConfig+0x3b4>)
 80011ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011d0:	f042 0204 	orr.w	r2, r2, #4
 80011d4:	671a      	str	r2, [r3, #112]	; 0x70
 80011d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011d8:	f042 0201 	orr.w	r2, r2, #1
 80011dc:	671a      	str	r2, [r3, #112]	; 0x70
 80011de:	e791      	b.n	8001104 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 80011e0:	f7ff fd0a 	bl	8000bf8 <HAL_GetTick>
 80011e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e6:	e005      	b.n	80011f4 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fd06 	bl	8000bf8 <HAL_GetTick>
 80011ec:	1b80      	subs	r0, r0, r6
 80011ee:	2802      	cmp	r0, #2
 80011f0:	f63f af72 	bhi.w	80010d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	0199      	lsls	r1, r3, #6
 80011f8:	d4f6      	bmi.n	80011e8 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011fa:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80011fe:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001202:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001204:	4c0d      	ldr	r4, [pc, #52]	; (800123c <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001206:	4333      	orrs	r3, r6
 8001208:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800120c:	0852      	lsrs	r2, r2, #1
 800120e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001212:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001214:	490a      	ldr	r1, [pc, #40]	; (8001240 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800121a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800121c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800121e:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001220:	f7ff fcea 	bl	8000bf8 <HAL_GetTick>
 8001224:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001226:	e005      	b.n	8001234 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001228:	f7ff fce6 	bl	8000bf8 <HAL_GetTick>
 800122c:	1b40      	subs	r0, r0, r5
 800122e:	2802      	cmp	r0, #2
 8001230:	f63f af52 	bhi.w	80010d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	019a      	lsls	r2, r3, #6
 8001238:	d5f6      	bpl.n	8001228 <HAL_RCC_OscConfig+0x3a0>
 800123a:	e6d3      	b.n	8000fe4 <HAL_RCC_OscConfig+0x15c>
 800123c:	40023800 	.word	0x40023800
 8001240:	42470060 	.word	0x42470060

08001244 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001244:	4917      	ldr	r1, [pc, #92]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001246:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001248:	688b      	ldr	r3, [r1, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b04      	cmp	r3, #4
 8001250:	d01b      	beq.n	800128a <HAL_RCC_GetSysClockFreq+0x46>
 8001252:	2b08      	cmp	r3, #8
 8001254:	d117      	bne.n	8001286 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001256:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001258:	684b      	ldr	r3, [r1, #4]
 800125a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800125e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001262:	d114      	bne.n	800128e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001264:	6849      	ldr	r1, [r1, #4]
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001268:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800126c:	fba1 0100 	umull	r0, r1, r1, r0
 8001270:	f7ff f806 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800127c:	3301      	adds	r3, #1
 800127e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001280:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001284:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001288:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800128a:	4808      	ldr	r0, [pc, #32]	; (80012ac <HAL_RCC_GetSysClockFreq+0x68>)
}
 800128c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800128e:	684b      	ldr	r3, [r1, #4]
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <HAL_RCC_GetSysClockFreq+0x68>)
 8001292:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001296:	fba3 0100 	umull	r0, r1, r3, r0
 800129a:	2300      	movs	r3, #0
 800129c:	f7fe fff0 	bl	8000280 <__aeabi_uldivmod>
 80012a0:	e7e8      	b.n	8001274 <HAL_RCC_GetSysClockFreq+0x30>
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	00f42400 	.word	0x00f42400
 80012ac:	007a1200 	.word	0x007a1200

080012b0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80012b0:	b160      	cbz	r0, 80012cc <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012b2:	4a49      	ldr	r2, [pc, #292]	; (80013d8 <HAL_RCC_ClockConfig+0x128>)
 80012b4:	6813      	ldr	r3, [r2, #0]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	428b      	cmp	r3, r1
 80012bc:	d208      	bcs.n	80012d0 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	b2cb      	uxtb	r3, r1
 80012c0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c2:	6813      	ldr	r3, [r2, #0]
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80012cc:	2001      	movs	r0, #1
}
 80012ce:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d0:	6803      	ldr	r3, [r0, #0]
{
 80012d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d6:	079d      	lsls	r5, r3, #30
 80012d8:	d514      	bpl.n	8001304 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012da:	075c      	lsls	r4, r3, #29
 80012dc:	d504      	bpl.n	80012e8 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012de:	4c3f      	ldr	r4, [pc, #252]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 80012e0:	68a2      	ldr	r2, [r4, #8]
 80012e2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80012e6:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e8:	071a      	lsls	r2, r3, #28
 80012ea:	d504      	bpl.n	80012f6 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ec:	4c3b      	ldr	r4, [pc, #236]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 80012ee:	68a2      	ldr	r2, [r4, #8]
 80012f0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80012f4:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f6:	4c39      	ldr	r4, [pc, #228]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 80012f8:	6885      	ldr	r5, [r0, #8]
 80012fa:	68a2      	ldr	r2, [r4, #8]
 80012fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001300:	432a      	orrs	r2, r5
 8001302:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001304:	07df      	lsls	r7, r3, #31
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	d522      	bpl.n	8001352 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130c:	6842      	ldr	r2, [r0, #4]
 800130e:	2a01      	cmp	r2, #1
 8001310:	d057      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001312:	1e93      	subs	r3, r2, #2
 8001314:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 8001318:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131a:	d959      	bls.n	80013d0 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	0799      	lsls	r1, r3, #30
 800131e:	d525      	bpl.n	800136c <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001320:	4e2e      	ldr	r6, [pc, #184]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 8001322:	68b3      	ldr	r3, [r6, #8]
 8001324:	f023 0303 	bic.w	r3, r3, #3
 8001328:	4313      	orrs	r3, r2
 800132a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800132c:	f7ff fc64 	bl	8000bf8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001330:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001334:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001336:	e005      	b.n	8001344 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001338:	f7ff fc5e 	bl	8000bf8 <HAL_GetTick>
 800133c:	eba0 0008 	sub.w	r0, r0, r8
 8001340:	42b8      	cmp	r0, r7
 8001342:	d843      	bhi.n	80013cc <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001344:	68b3      	ldr	r3, [r6, #8]
 8001346:	6862      	ldr	r2, [r4, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001350:	d1f2      	bne.n	8001338 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_RCC_ClockConfig+0x128>)
 8001354:	6813      	ldr	r3, [r2, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	42ab      	cmp	r3, r5
 800135c:	d909      	bls.n	8001372 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	b2eb      	uxtb	r3, r5
 8001360:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	6813      	ldr	r3, [r2, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	42ab      	cmp	r3, r5
 800136a:	d002      	beq.n	8001372 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
}
 800136e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	075a      	lsls	r2, r3, #29
 8001376:	d506      	bpl.n	8001386 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001378:	4918      	ldr	r1, [pc, #96]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 800137a:	68e0      	ldr	r0, [r4, #12]
 800137c:	688a      	ldr	r2, [r1, #8]
 800137e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001382:	4302      	orrs	r2, r0
 8001384:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	071b      	lsls	r3, r3, #28
 8001388:	d412      	bmi.n	80013b0 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800138a:	f7ff ff5b 	bl	8001244 <HAL_RCC_GetSysClockFreq>
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 8001390:	4c13      	ldr	r4, [pc, #76]	; (80013e0 <HAL_RCC_ClockConfig+0x130>)
 8001392:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8001394:	4913      	ldr	r1, [pc, #76]	; (80013e4 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_RCC_ClockConfig+0x138>)
 8001398:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800139c:	5ce3      	ldrb	r3, [r4, r3]
 800139e:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80013a2:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013a4:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80013a6:	f7ff fbdd 	bl	8000b64 <HAL_InitTick>
  return HAL_OK;
 80013aa:	2000      	movs	r0, #0
}
 80013ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 80013b2:	6921      	ldr	r1, [r4, #16]
 80013b4:	6893      	ldr	r3, [r2, #8]
 80013b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013be:	6093      	str	r3, [r2, #8]
 80013c0:	e7e3      	b.n	800138a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_RCC_ClockConfig+0x12c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	039e      	lsls	r6, r3, #14
 80013c8:	d4aa      	bmi.n	8001320 <HAL_RCC_ClockConfig+0x70>
 80013ca:	e7cf      	b.n	800136c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80013cc:	2003      	movs	r0, #3
 80013ce:	e7ed      	b.n	80013ac <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d0:	0198      	lsls	r0, r3, #6
 80013d2:	d4a5      	bmi.n	8001320 <HAL_RCC_ClockConfig+0x70>
 80013d4:	e7ca      	b.n	800136c <HAL_RCC_ClockConfig+0xbc>
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	0800268c 	.word	0x0800268c
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000000 	.word	0x20000000

080013ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_RCC_GetPCLK1Freq+0x14>)
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013f0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80013f2:	4905      	ldr	r1, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80013f8:	6808      	ldr	r0, [r1, #0]
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
}
 80013fc:	40d8      	lsrs	r0, r3
 80013fe:	4770      	bx	lr
 8001400:	40023800 	.word	0x40023800
 8001404:	0800269c 	.word	0x0800269c
 8001408:	20000000 	.word	0x20000000

0800140c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_RCC_GetPCLK2Freq+0x14>)
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001410:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001412:	4905      	ldr	r1, [pc, #20]	; (8001428 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001414:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001418:	6808      	ldr	r0, [r1, #0]
 800141a:	5cd3      	ldrb	r3, [r2, r3]
}
 800141c:	40d8      	lsrs	r0, r3
 800141e:	4770      	bx	lr
 8001420:	40023800 	.word	0x40023800
 8001424:	0800269c 	.word	0x0800269c
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800142c:	2800      	cmp	r0, #0
 800142e:	f000 8093 	beq.w	8001558 <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001432:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001436:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001438:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800143c:	4604      	mov	r4, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8085 	beq.w	800154e <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001444:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001446:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8001448:	2224      	movs	r2, #36	; 0x24
 800144a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800144e:	68d8      	ldr	r0, [r3, #12]
 8001450:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001454:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8001458:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800145a:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800145c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800145e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001462:	4329      	orrs	r1, r5
 8001464:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001466:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001468:	6965      	ldr	r5, [r4, #20]
 800146a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 800146c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001470:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001472:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001476:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001478:	430a      	orrs	r2, r1
 800147a:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	69a1      	ldr	r1, [r4, #24]
 8001480:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001484:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001486:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800148a:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800148c:	4a36      	ldr	r2, [pc, #216]	; (8001568 <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800148e:	d034      	beq.n	80014fa <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001490:	4293      	cmp	r3, r2
 8001492:	d063      	beq.n	800155c <HAL_UART_Init+0x130>
 8001494:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001498:	4293      	cmp	r3, r2
 800149a:	d05f      	beq.n	800155c <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800149c:	f7ff ffa6 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014a0:	6863      	ldr	r3, [r4, #4]
 80014a2:	4d32      	ldr	r5, [pc, #200]	; (800156c <HAL_UART_Init+0x140>)
 80014a4:	2219      	movs	r2, #25
 80014a6:	fba0 0102 	umull	r0, r1, r0, r2
 80014aa:	009a      	lsls	r2, r3, #2
 80014ac:	0f9b      	lsrs	r3, r3, #30
 80014ae:	f7fe fee7 	bl	8000280 <__aeabi_uldivmod>
 80014b2:	fba5 2100 	umull	r2, r1, r5, r0
 80014b6:	0949      	lsrs	r1, r1, #5
 80014b8:	2264      	movs	r2, #100	; 0x64
 80014ba:	fb02 0211 	mls	r2, r2, r1, r0
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	3232      	adds	r2, #50	; 0x32
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	fba5 0202 	umull	r0, r2, r5, r2
 80014c8:	0109      	lsls	r1, r1, #4
 80014ca:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 80014ce:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80014e0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014e2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80014e4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80014e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014ea:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80014ec:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ee:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80014f0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80014f4:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d031      	beq.n	8001562 <HAL_UART_Init+0x136>
 80014fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001502:	4293      	cmp	r3, r2
 8001504:	d02d      	beq.n	8001562 <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001506:	f7ff ff71 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800150a:	6862      	ldr	r2, [r4, #4]
 800150c:	2600      	movs	r6, #0
 800150e:	1892      	adds	r2, r2, r2
 8001510:	f04f 0119 	mov.w	r1, #25
 8001514:	eb46 0306 	adc.w	r3, r6, r6
 8001518:	fba0 0101 	umull	r0, r1, r0, r1
 800151c:	f7fe feb0 	bl	8000280 <__aeabi_uldivmod>
 8001520:	4e12      	ldr	r6, [pc, #72]	; (800156c <HAL_UART_Init+0x140>)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	fba6 2100 	umull	r2, r1, r6, r0
 8001528:	094d      	lsrs	r5, r1, #5
 800152a:	2264      	movs	r2, #100	; 0x64
 800152c:	fb02 0215 	mls	r2, r2, r5, r0
 8001530:	00d2      	lsls	r2, r2, #3
 8001532:	3232      	adds	r2, #50	; 0x32
 8001534:	fba6 1202 	umull	r1, r2, r6, r2
 8001538:	0952      	lsrs	r2, r2, #5
 800153a:	f002 0107 	and.w	r1, r2, #7
 800153e:	0052      	lsls	r2, r2, #1
 8001540:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8001544:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001548:	440a      	add	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e7c0      	b.n	80014d0 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800154e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001552:	f7ff faa9 	bl	8000aa8 <HAL_UART_MspInit>
 8001556:	e775      	b.n	8001444 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8001558:	2001      	movs	r0, #1
}
 800155a:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 800155c:	f7ff ff56 	bl	800140c <HAL_RCC_GetPCLK2Freq>
 8001560:	e79e      	b.n	80014a0 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001562:	f7ff ff53 	bl	800140c <HAL_RCC_GetPCLK2Freq>
 8001566:	e7d0      	b.n	800150a <HAL_UART_Init+0xde>
 8001568:	40011000 	.word	0x40011000
 800156c:	51eb851f 	.word	0x51eb851f

08001570 <__errno>:
 8001570:	4b01      	ldr	r3, [pc, #4]	; (8001578 <__errno+0x8>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000000c 	.word	0x2000000c

0800157c <__libc_init_array>:
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	4e0d      	ldr	r6, [pc, #52]	; (80015b4 <__libc_init_array+0x38>)
 8001580:	4c0d      	ldr	r4, [pc, #52]	; (80015b8 <__libc_init_array+0x3c>)
 8001582:	1ba4      	subs	r4, r4, r6
 8001584:	10a4      	asrs	r4, r4, #2
 8001586:	2500      	movs	r5, #0
 8001588:	42a5      	cmp	r5, r4
 800158a:	d109      	bne.n	80015a0 <__libc_init_array+0x24>
 800158c:	4e0b      	ldr	r6, [pc, #44]	; (80015bc <__libc_init_array+0x40>)
 800158e:	4c0c      	ldr	r4, [pc, #48]	; (80015c0 <__libc_init_array+0x44>)
 8001590:	f001 f81e 	bl	80025d0 <_init>
 8001594:	1ba4      	subs	r4, r4, r6
 8001596:	10a4      	asrs	r4, r4, #2
 8001598:	2500      	movs	r5, #0
 800159a:	42a5      	cmp	r5, r4
 800159c:	d105      	bne.n	80015aa <__libc_init_array+0x2e>
 800159e:	bd70      	pop	{r4, r5, r6, pc}
 80015a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015a4:	4798      	blx	r3
 80015a6:	3501      	adds	r5, #1
 80015a8:	e7ee      	b.n	8001588 <__libc_init_array+0xc>
 80015aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ae:	4798      	blx	r3
 80015b0:	3501      	adds	r5, #1
 80015b2:	e7f2      	b.n	800159a <__libc_init_array+0x1e>
 80015b4:	08002744 	.word	0x08002744
 80015b8:	08002744 	.word	0x08002744
 80015bc:	08002744 	.word	0x08002744
 80015c0:	08002748 	.word	0x08002748

080015c4 <memset>:
 80015c4:	4402      	add	r2, r0
 80015c6:	4603      	mov	r3, r0
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d100      	bne.n	80015ce <memset+0xa>
 80015cc:	4770      	bx	lr
 80015ce:	f803 1b01 	strb.w	r1, [r3], #1
 80015d2:	e7f9      	b.n	80015c8 <memset+0x4>

080015d4 <iprintf>:
 80015d4:	b40f      	push	{r0, r1, r2, r3}
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <iprintf+0x2c>)
 80015d8:	b513      	push	{r0, r1, r4, lr}
 80015da:	681c      	ldr	r4, [r3, #0]
 80015dc:	b124      	cbz	r4, 80015e8 <iprintf+0x14>
 80015de:	69a3      	ldr	r3, [r4, #24]
 80015e0:	b913      	cbnz	r3, 80015e8 <iprintf+0x14>
 80015e2:	4620      	mov	r0, r4
 80015e4:	f000 fad0 	bl	8001b88 <__sinit>
 80015e8:	ab05      	add	r3, sp, #20
 80015ea:	9a04      	ldr	r2, [sp, #16]
 80015ec:	68a1      	ldr	r1, [r4, #8]
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 fc91 	bl	8001f18 <_vfiprintf_r>
 80015f6:	b002      	add	sp, #8
 80015f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015fc:	b004      	add	sp, #16
 80015fe:	4770      	bx	lr
 8001600:	2000000c 	.word	0x2000000c

08001604 <_puts_r>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	460e      	mov	r6, r1
 8001608:	4605      	mov	r5, r0
 800160a:	b118      	cbz	r0, 8001614 <_puts_r+0x10>
 800160c:	6983      	ldr	r3, [r0, #24]
 800160e:	b90b      	cbnz	r3, 8001614 <_puts_r+0x10>
 8001610:	f000 faba 	bl	8001b88 <__sinit>
 8001614:	69ab      	ldr	r3, [r5, #24]
 8001616:	68ac      	ldr	r4, [r5, #8]
 8001618:	b913      	cbnz	r3, 8001620 <_puts_r+0x1c>
 800161a:	4628      	mov	r0, r5
 800161c:	f000 fab4 	bl	8001b88 <__sinit>
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <_puts_r+0xac>)
 8001622:	429c      	cmp	r4, r3
 8001624:	d117      	bne.n	8001656 <_puts_r+0x52>
 8001626:	686c      	ldr	r4, [r5, #4]
 8001628:	89a3      	ldrh	r3, [r4, #12]
 800162a:	071b      	lsls	r3, r3, #28
 800162c:	d51d      	bpl.n	800166a <_puts_r+0x66>
 800162e:	6923      	ldr	r3, [r4, #16]
 8001630:	b1db      	cbz	r3, 800166a <_puts_r+0x66>
 8001632:	3e01      	subs	r6, #1
 8001634:	68a3      	ldr	r3, [r4, #8]
 8001636:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800163a:	3b01      	subs	r3, #1
 800163c:	60a3      	str	r3, [r4, #8]
 800163e:	b9e9      	cbnz	r1, 800167c <_puts_r+0x78>
 8001640:	2b00      	cmp	r3, #0
 8001642:	da2e      	bge.n	80016a2 <_puts_r+0x9e>
 8001644:	4622      	mov	r2, r4
 8001646:	210a      	movs	r1, #10
 8001648:	4628      	mov	r0, r5
 800164a:	f000 f8ed 	bl	8001828 <__swbuf_r>
 800164e:	3001      	adds	r0, #1
 8001650:	d011      	beq.n	8001676 <_puts_r+0x72>
 8001652:	200a      	movs	r0, #10
 8001654:	e011      	b.n	800167a <_puts_r+0x76>
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <_puts_r+0xb0>)
 8001658:	429c      	cmp	r4, r3
 800165a:	d101      	bne.n	8001660 <_puts_r+0x5c>
 800165c:	68ac      	ldr	r4, [r5, #8]
 800165e:	e7e3      	b.n	8001628 <_puts_r+0x24>
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_puts_r+0xb4>)
 8001662:	429c      	cmp	r4, r3
 8001664:	bf08      	it	eq
 8001666:	68ec      	ldreq	r4, [r5, #12]
 8001668:	e7de      	b.n	8001628 <_puts_r+0x24>
 800166a:	4621      	mov	r1, r4
 800166c:	4628      	mov	r0, r5
 800166e:	f000 f92d 	bl	80018cc <__swsetup_r>
 8001672:	2800      	cmp	r0, #0
 8001674:	d0dd      	beq.n	8001632 <_puts_r+0x2e>
 8001676:	f04f 30ff 	mov.w	r0, #4294967295
 800167a:	bd70      	pop	{r4, r5, r6, pc}
 800167c:	2b00      	cmp	r3, #0
 800167e:	da04      	bge.n	800168a <_puts_r+0x86>
 8001680:	69a2      	ldr	r2, [r4, #24]
 8001682:	429a      	cmp	r2, r3
 8001684:	dc06      	bgt.n	8001694 <_puts_r+0x90>
 8001686:	290a      	cmp	r1, #10
 8001688:	d004      	beq.n	8001694 <_puts_r+0x90>
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	6022      	str	r2, [r4, #0]
 8001690:	7019      	strb	r1, [r3, #0]
 8001692:	e7cf      	b.n	8001634 <_puts_r+0x30>
 8001694:	4622      	mov	r2, r4
 8001696:	4628      	mov	r0, r5
 8001698:	f000 f8c6 	bl	8001828 <__swbuf_r>
 800169c:	3001      	adds	r0, #1
 800169e:	d1c9      	bne.n	8001634 <_puts_r+0x30>
 80016a0:	e7e9      	b.n	8001676 <_puts_r+0x72>
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	200a      	movs	r0, #10
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	6022      	str	r2, [r4, #0]
 80016aa:	7018      	strb	r0, [r3, #0]
 80016ac:	e7e5      	b.n	800167a <_puts_r+0x76>
 80016ae:	bf00      	nop
 80016b0:	080026c8 	.word	0x080026c8
 80016b4:	080026e8 	.word	0x080026e8
 80016b8:	080026a8 	.word	0x080026a8

080016bc <puts>:
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <puts+0xc>)
 80016be:	4601      	mov	r1, r0
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	f7ff bf9f 	b.w	8001604 <_puts_r>
 80016c6:	bf00      	nop
 80016c8:	2000000c 	.word	0x2000000c

080016cc <setvbuf>:
 80016cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80016d0:	461d      	mov	r5, r3
 80016d2:	4b51      	ldr	r3, [pc, #324]	; (8001818 <setvbuf+0x14c>)
 80016d4:	681e      	ldr	r6, [r3, #0]
 80016d6:	4604      	mov	r4, r0
 80016d8:	460f      	mov	r7, r1
 80016da:	4690      	mov	r8, r2
 80016dc:	b126      	cbz	r6, 80016e8 <setvbuf+0x1c>
 80016de:	69b3      	ldr	r3, [r6, #24]
 80016e0:	b913      	cbnz	r3, 80016e8 <setvbuf+0x1c>
 80016e2:	4630      	mov	r0, r6
 80016e4:	f000 fa50 	bl	8001b88 <__sinit>
 80016e8:	4b4c      	ldr	r3, [pc, #304]	; (800181c <setvbuf+0x150>)
 80016ea:	429c      	cmp	r4, r3
 80016ec:	d152      	bne.n	8001794 <setvbuf+0xc8>
 80016ee:	6874      	ldr	r4, [r6, #4]
 80016f0:	f1b8 0f02 	cmp.w	r8, #2
 80016f4:	d006      	beq.n	8001704 <setvbuf+0x38>
 80016f6:	f1b8 0f01 	cmp.w	r8, #1
 80016fa:	f200 8089 	bhi.w	8001810 <setvbuf+0x144>
 80016fe:	2d00      	cmp	r5, #0
 8001700:	f2c0 8086 	blt.w	8001810 <setvbuf+0x144>
 8001704:	4621      	mov	r1, r4
 8001706:	4630      	mov	r0, r6
 8001708:	f000 f9d4 	bl	8001ab4 <_fflush_r>
 800170c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800170e:	b141      	cbz	r1, 8001722 <setvbuf+0x56>
 8001710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001714:	4299      	cmp	r1, r3
 8001716:	d002      	beq.n	800171e <setvbuf+0x52>
 8001718:	4630      	mov	r0, r6
 800171a:	f000 fb2b 	bl	8001d74 <_free_r>
 800171e:	2300      	movs	r3, #0
 8001720:	6363      	str	r3, [r4, #52]	; 0x34
 8001722:	2300      	movs	r3, #0
 8001724:	61a3      	str	r3, [r4, #24]
 8001726:	6063      	str	r3, [r4, #4]
 8001728:	89a3      	ldrh	r3, [r4, #12]
 800172a:	061b      	lsls	r3, r3, #24
 800172c:	d503      	bpl.n	8001736 <setvbuf+0x6a>
 800172e:	6921      	ldr	r1, [r4, #16]
 8001730:	4630      	mov	r0, r6
 8001732:	f000 fb1f 	bl	8001d74 <_free_r>
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800173c:	f023 0303 	bic.w	r3, r3, #3
 8001740:	f1b8 0f02 	cmp.w	r8, #2
 8001744:	81a3      	strh	r3, [r4, #12]
 8001746:	d05d      	beq.n	8001804 <setvbuf+0x138>
 8001748:	ab01      	add	r3, sp, #4
 800174a:	466a      	mov	r2, sp
 800174c:	4621      	mov	r1, r4
 800174e:	4630      	mov	r0, r6
 8001750:	f000 faa4 	bl	8001c9c <__swhatbuf_r>
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	4318      	orrs	r0, r3
 8001758:	81a0      	strh	r0, [r4, #12]
 800175a:	bb2d      	cbnz	r5, 80017a8 <setvbuf+0xdc>
 800175c:	9d00      	ldr	r5, [sp, #0]
 800175e:	4628      	mov	r0, r5
 8001760:	f000 fb00 	bl	8001d64 <malloc>
 8001764:	4607      	mov	r7, r0
 8001766:	2800      	cmp	r0, #0
 8001768:	d14e      	bne.n	8001808 <setvbuf+0x13c>
 800176a:	f8dd 9000 	ldr.w	r9, [sp]
 800176e:	45a9      	cmp	r9, r5
 8001770:	d13c      	bne.n	80017ec <setvbuf+0x120>
 8001772:	f04f 30ff 	mov.w	r0, #4294967295
 8001776:	89a3      	ldrh	r3, [r4, #12]
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	81a3      	strh	r3, [r4, #12]
 800177e:	2300      	movs	r3, #0
 8001780:	60a3      	str	r3, [r4, #8]
 8001782:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001786:	6023      	str	r3, [r4, #0]
 8001788:	6123      	str	r3, [r4, #16]
 800178a:	2301      	movs	r3, #1
 800178c:	6163      	str	r3, [r4, #20]
 800178e:	b003      	add	sp, #12
 8001790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <setvbuf+0x154>)
 8001796:	429c      	cmp	r4, r3
 8001798:	d101      	bne.n	800179e <setvbuf+0xd2>
 800179a:	68b4      	ldr	r4, [r6, #8]
 800179c:	e7a8      	b.n	80016f0 <setvbuf+0x24>
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <setvbuf+0x158>)
 80017a0:	429c      	cmp	r4, r3
 80017a2:	bf08      	it	eq
 80017a4:	68f4      	ldreq	r4, [r6, #12]
 80017a6:	e7a3      	b.n	80016f0 <setvbuf+0x24>
 80017a8:	2f00      	cmp	r7, #0
 80017aa:	d0d8      	beq.n	800175e <setvbuf+0x92>
 80017ac:	69b3      	ldr	r3, [r6, #24]
 80017ae:	b913      	cbnz	r3, 80017b6 <setvbuf+0xea>
 80017b0:	4630      	mov	r0, r6
 80017b2:	f000 f9e9 	bl	8001b88 <__sinit>
 80017b6:	f1b8 0f01 	cmp.w	r8, #1
 80017ba:	bf08      	it	eq
 80017bc:	89a3      	ldrheq	r3, [r4, #12]
 80017be:	6027      	str	r7, [r4, #0]
 80017c0:	bf04      	itt	eq
 80017c2:	f043 0301 	orreq.w	r3, r3, #1
 80017c6:	81a3      	strheq	r3, [r4, #12]
 80017c8:	89a3      	ldrh	r3, [r4, #12]
 80017ca:	f013 0008 	ands.w	r0, r3, #8
 80017ce:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80017d2:	d01b      	beq.n	800180c <setvbuf+0x140>
 80017d4:	f013 0001 	ands.w	r0, r3, #1
 80017d8:	bf18      	it	ne
 80017da:	426d      	negne	r5, r5
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	bf1d      	ittte	ne
 80017e2:	60a3      	strne	r3, [r4, #8]
 80017e4:	61a5      	strne	r5, [r4, #24]
 80017e6:	4618      	movne	r0, r3
 80017e8:	60a5      	streq	r5, [r4, #8]
 80017ea:	e7d0      	b.n	800178e <setvbuf+0xc2>
 80017ec:	4648      	mov	r0, r9
 80017ee:	f000 fab9 	bl	8001d64 <malloc>
 80017f2:	4607      	mov	r7, r0
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d0bc      	beq.n	8001772 <setvbuf+0xa6>
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fe:	81a3      	strh	r3, [r4, #12]
 8001800:	464d      	mov	r5, r9
 8001802:	e7d3      	b.n	80017ac <setvbuf+0xe0>
 8001804:	2000      	movs	r0, #0
 8001806:	e7b6      	b.n	8001776 <setvbuf+0xaa>
 8001808:	46a9      	mov	r9, r5
 800180a:	e7f5      	b.n	80017f8 <setvbuf+0x12c>
 800180c:	60a0      	str	r0, [r4, #8]
 800180e:	e7be      	b.n	800178e <setvbuf+0xc2>
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	e7bb      	b.n	800178e <setvbuf+0xc2>
 8001816:	bf00      	nop
 8001818:	2000000c 	.word	0x2000000c
 800181c:	080026c8 	.word	0x080026c8
 8001820:	080026e8 	.word	0x080026e8
 8001824:	080026a8 	.word	0x080026a8

08001828 <__swbuf_r>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	460e      	mov	r6, r1
 800182c:	4614      	mov	r4, r2
 800182e:	4605      	mov	r5, r0
 8001830:	b118      	cbz	r0, 800183a <__swbuf_r+0x12>
 8001832:	6983      	ldr	r3, [r0, #24]
 8001834:	b90b      	cbnz	r3, 800183a <__swbuf_r+0x12>
 8001836:	f000 f9a7 	bl	8001b88 <__sinit>
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <__swbuf_r+0x98>)
 800183c:	429c      	cmp	r4, r3
 800183e:	d12a      	bne.n	8001896 <__swbuf_r+0x6e>
 8001840:	686c      	ldr	r4, [r5, #4]
 8001842:	69a3      	ldr	r3, [r4, #24]
 8001844:	60a3      	str	r3, [r4, #8]
 8001846:	89a3      	ldrh	r3, [r4, #12]
 8001848:	071a      	lsls	r2, r3, #28
 800184a:	d52e      	bpl.n	80018aa <__swbuf_r+0x82>
 800184c:	6923      	ldr	r3, [r4, #16]
 800184e:	b363      	cbz	r3, 80018aa <__swbuf_r+0x82>
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	1ac0      	subs	r0, r0, r3
 8001856:	6963      	ldr	r3, [r4, #20]
 8001858:	b2f6      	uxtb	r6, r6
 800185a:	4283      	cmp	r3, r0
 800185c:	4637      	mov	r7, r6
 800185e:	dc04      	bgt.n	800186a <__swbuf_r+0x42>
 8001860:	4621      	mov	r1, r4
 8001862:	4628      	mov	r0, r5
 8001864:	f000 f926 	bl	8001ab4 <_fflush_r>
 8001868:	bb28      	cbnz	r0, 80018b6 <__swbuf_r+0x8e>
 800186a:	68a3      	ldr	r3, [r4, #8]
 800186c:	3b01      	subs	r3, #1
 800186e:	60a3      	str	r3, [r4, #8]
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	6022      	str	r2, [r4, #0]
 8001876:	701e      	strb	r6, [r3, #0]
 8001878:	6963      	ldr	r3, [r4, #20]
 800187a:	3001      	adds	r0, #1
 800187c:	4283      	cmp	r3, r0
 800187e:	d004      	beq.n	800188a <__swbuf_r+0x62>
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	07db      	lsls	r3, r3, #31
 8001884:	d519      	bpl.n	80018ba <__swbuf_r+0x92>
 8001886:	2e0a      	cmp	r6, #10
 8001888:	d117      	bne.n	80018ba <__swbuf_r+0x92>
 800188a:	4621      	mov	r1, r4
 800188c:	4628      	mov	r0, r5
 800188e:	f000 f911 	bl	8001ab4 <_fflush_r>
 8001892:	b190      	cbz	r0, 80018ba <__swbuf_r+0x92>
 8001894:	e00f      	b.n	80018b6 <__swbuf_r+0x8e>
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <__swbuf_r+0x9c>)
 8001898:	429c      	cmp	r4, r3
 800189a:	d101      	bne.n	80018a0 <__swbuf_r+0x78>
 800189c:	68ac      	ldr	r4, [r5, #8]
 800189e:	e7d0      	b.n	8001842 <__swbuf_r+0x1a>
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <__swbuf_r+0xa0>)
 80018a2:	429c      	cmp	r4, r3
 80018a4:	bf08      	it	eq
 80018a6:	68ec      	ldreq	r4, [r5, #12]
 80018a8:	e7cb      	b.n	8001842 <__swbuf_r+0x1a>
 80018aa:	4621      	mov	r1, r4
 80018ac:	4628      	mov	r0, r5
 80018ae:	f000 f80d 	bl	80018cc <__swsetup_r>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d0cc      	beq.n	8001850 <__swbuf_r+0x28>
 80018b6:	f04f 37ff 	mov.w	r7, #4294967295
 80018ba:	4638      	mov	r0, r7
 80018bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018be:	bf00      	nop
 80018c0:	080026c8 	.word	0x080026c8
 80018c4:	080026e8 	.word	0x080026e8
 80018c8:	080026a8 	.word	0x080026a8

080018cc <__swsetup_r>:
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <__swsetup_r+0xcc>)
 80018ce:	b570      	push	{r4, r5, r6, lr}
 80018d0:	681d      	ldr	r5, [r3, #0]
 80018d2:	4606      	mov	r6, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	b125      	cbz	r5, 80018e2 <__swsetup_r+0x16>
 80018d8:	69ab      	ldr	r3, [r5, #24]
 80018da:	b913      	cbnz	r3, 80018e2 <__swsetup_r+0x16>
 80018dc:	4628      	mov	r0, r5
 80018de:	f000 f953 	bl	8001b88 <__sinit>
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <__swsetup_r+0xd0>)
 80018e4:	429c      	cmp	r4, r3
 80018e6:	d10f      	bne.n	8001908 <__swsetup_r+0x3c>
 80018e8:	686c      	ldr	r4, [r5, #4]
 80018ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	0715      	lsls	r5, r2, #28
 80018f2:	d42c      	bmi.n	800194e <__swsetup_r+0x82>
 80018f4:	06d0      	lsls	r0, r2, #27
 80018f6:	d411      	bmi.n	800191c <__swsetup_r+0x50>
 80018f8:	2209      	movs	r2, #9
 80018fa:	6032      	str	r2, [r6, #0]
 80018fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001900:	81a3      	strh	r3, [r4, #12]
 8001902:	f04f 30ff 	mov.w	r0, #4294967295
 8001906:	e03e      	b.n	8001986 <__swsetup_r+0xba>
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <__swsetup_r+0xd4>)
 800190a:	429c      	cmp	r4, r3
 800190c:	d101      	bne.n	8001912 <__swsetup_r+0x46>
 800190e:	68ac      	ldr	r4, [r5, #8]
 8001910:	e7eb      	b.n	80018ea <__swsetup_r+0x1e>
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <__swsetup_r+0xd8>)
 8001914:	429c      	cmp	r4, r3
 8001916:	bf08      	it	eq
 8001918:	68ec      	ldreq	r4, [r5, #12]
 800191a:	e7e6      	b.n	80018ea <__swsetup_r+0x1e>
 800191c:	0751      	lsls	r1, r2, #29
 800191e:	d512      	bpl.n	8001946 <__swsetup_r+0x7a>
 8001920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001922:	b141      	cbz	r1, 8001936 <__swsetup_r+0x6a>
 8001924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001928:	4299      	cmp	r1, r3
 800192a:	d002      	beq.n	8001932 <__swsetup_r+0x66>
 800192c:	4630      	mov	r0, r6
 800192e:	f000 fa21 	bl	8001d74 <_free_r>
 8001932:	2300      	movs	r3, #0
 8001934:	6363      	str	r3, [r4, #52]	; 0x34
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800193c:	81a3      	strh	r3, [r4, #12]
 800193e:	2300      	movs	r3, #0
 8001940:	6063      	str	r3, [r4, #4]
 8001942:	6923      	ldr	r3, [r4, #16]
 8001944:	6023      	str	r3, [r4, #0]
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	81a3      	strh	r3, [r4, #12]
 800194e:	6923      	ldr	r3, [r4, #16]
 8001950:	b94b      	cbnz	r3, 8001966 <__swsetup_r+0x9a>
 8001952:	89a3      	ldrh	r3, [r4, #12]
 8001954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800195c:	d003      	beq.n	8001966 <__swsetup_r+0x9a>
 800195e:	4621      	mov	r1, r4
 8001960:	4630      	mov	r0, r6
 8001962:	f000 f9bf 	bl	8001ce4 <__smakebuf_r>
 8001966:	89a2      	ldrh	r2, [r4, #12]
 8001968:	f012 0301 	ands.w	r3, r2, #1
 800196c:	d00c      	beq.n	8001988 <__swsetup_r+0xbc>
 800196e:	2300      	movs	r3, #0
 8001970:	60a3      	str	r3, [r4, #8]
 8001972:	6963      	ldr	r3, [r4, #20]
 8001974:	425b      	negs	r3, r3
 8001976:	61a3      	str	r3, [r4, #24]
 8001978:	6923      	ldr	r3, [r4, #16]
 800197a:	b953      	cbnz	r3, 8001992 <__swsetup_r+0xc6>
 800197c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001980:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001984:	d1ba      	bne.n	80018fc <__swsetup_r+0x30>
 8001986:	bd70      	pop	{r4, r5, r6, pc}
 8001988:	0792      	lsls	r2, r2, #30
 800198a:	bf58      	it	pl
 800198c:	6963      	ldrpl	r3, [r4, #20]
 800198e:	60a3      	str	r3, [r4, #8]
 8001990:	e7f2      	b.n	8001978 <__swsetup_r+0xac>
 8001992:	2000      	movs	r0, #0
 8001994:	e7f7      	b.n	8001986 <__swsetup_r+0xba>
 8001996:	bf00      	nop
 8001998:	2000000c 	.word	0x2000000c
 800199c:	080026c8 	.word	0x080026c8
 80019a0:	080026e8 	.word	0x080026e8
 80019a4:	080026a8 	.word	0x080026a8

080019a8 <__sflush_r>:
 80019a8:	898a      	ldrh	r2, [r1, #12]
 80019aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019ae:	4605      	mov	r5, r0
 80019b0:	0710      	lsls	r0, r2, #28
 80019b2:	460c      	mov	r4, r1
 80019b4:	d458      	bmi.n	8001a68 <__sflush_r+0xc0>
 80019b6:	684b      	ldr	r3, [r1, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	dc05      	bgt.n	80019c8 <__sflush_r+0x20>
 80019bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dc02      	bgt.n	80019c8 <__sflush_r+0x20>
 80019c2:	2000      	movs	r0, #0
 80019c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019ca:	2e00      	cmp	r6, #0
 80019cc:	d0f9      	beq.n	80019c2 <__sflush_r+0x1a>
 80019ce:	2300      	movs	r3, #0
 80019d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019d4:	682f      	ldr	r7, [r5, #0]
 80019d6:	6a21      	ldr	r1, [r4, #32]
 80019d8:	602b      	str	r3, [r5, #0]
 80019da:	d032      	beq.n	8001a42 <__sflush_r+0x9a>
 80019dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019de:	89a3      	ldrh	r3, [r4, #12]
 80019e0:	075a      	lsls	r2, r3, #29
 80019e2:	d505      	bpl.n	80019f0 <__sflush_r+0x48>
 80019e4:	6863      	ldr	r3, [r4, #4]
 80019e6:	1ac0      	subs	r0, r0, r3
 80019e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019ea:	b10b      	cbz	r3, 80019f0 <__sflush_r+0x48>
 80019ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ee:	1ac0      	subs	r0, r0, r3
 80019f0:	2300      	movs	r3, #0
 80019f2:	4602      	mov	r2, r0
 80019f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019f6:	6a21      	ldr	r1, [r4, #32]
 80019f8:	4628      	mov	r0, r5
 80019fa:	47b0      	blx	r6
 80019fc:	1c43      	adds	r3, r0, #1
 80019fe:	89a3      	ldrh	r3, [r4, #12]
 8001a00:	d106      	bne.n	8001a10 <__sflush_r+0x68>
 8001a02:	6829      	ldr	r1, [r5, #0]
 8001a04:	291d      	cmp	r1, #29
 8001a06:	d848      	bhi.n	8001a9a <__sflush_r+0xf2>
 8001a08:	4a29      	ldr	r2, [pc, #164]	; (8001ab0 <__sflush_r+0x108>)
 8001a0a:	40ca      	lsrs	r2, r1
 8001a0c:	07d6      	lsls	r6, r2, #31
 8001a0e:	d544      	bpl.n	8001a9a <__sflush_r+0xf2>
 8001a10:	2200      	movs	r2, #0
 8001a12:	6062      	str	r2, [r4, #4]
 8001a14:	04d9      	lsls	r1, r3, #19
 8001a16:	6922      	ldr	r2, [r4, #16]
 8001a18:	6022      	str	r2, [r4, #0]
 8001a1a:	d504      	bpl.n	8001a26 <__sflush_r+0x7e>
 8001a1c:	1c42      	adds	r2, r0, #1
 8001a1e:	d101      	bne.n	8001a24 <__sflush_r+0x7c>
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	b903      	cbnz	r3, 8001a26 <__sflush_r+0x7e>
 8001a24:	6560      	str	r0, [r4, #84]	; 0x54
 8001a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a28:	602f      	str	r7, [r5, #0]
 8001a2a:	2900      	cmp	r1, #0
 8001a2c:	d0c9      	beq.n	80019c2 <__sflush_r+0x1a>
 8001a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a32:	4299      	cmp	r1, r3
 8001a34:	d002      	beq.n	8001a3c <__sflush_r+0x94>
 8001a36:	4628      	mov	r0, r5
 8001a38:	f000 f99c 	bl	8001d74 <_free_r>
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8001a40:	e7c0      	b.n	80019c4 <__sflush_r+0x1c>
 8001a42:	2301      	movs	r3, #1
 8001a44:	4628      	mov	r0, r5
 8001a46:	47b0      	blx	r6
 8001a48:	1c41      	adds	r1, r0, #1
 8001a4a:	d1c8      	bne.n	80019de <__sflush_r+0x36>
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0c5      	beq.n	80019de <__sflush_r+0x36>
 8001a52:	2b1d      	cmp	r3, #29
 8001a54:	d001      	beq.n	8001a5a <__sflush_r+0xb2>
 8001a56:	2b16      	cmp	r3, #22
 8001a58:	d101      	bne.n	8001a5e <__sflush_r+0xb6>
 8001a5a:	602f      	str	r7, [r5, #0]
 8001a5c:	e7b1      	b.n	80019c2 <__sflush_r+0x1a>
 8001a5e:	89a3      	ldrh	r3, [r4, #12]
 8001a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a64:	81a3      	strh	r3, [r4, #12]
 8001a66:	e7ad      	b.n	80019c4 <__sflush_r+0x1c>
 8001a68:	690f      	ldr	r7, [r1, #16]
 8001a6a:	2f00      	cmp	r7, #0
 8001a6c:	d0a9      	beq.n	80019c2 <__sflush_r+0x1a>
 8001a6e:	0793      	lsls	r3, r2, #30
 8001a70:	680e      	ldr	r6, [r1, #0]
 8001a72:	bf08      	it	eq
 8001a74:	694b      	ldreq	r3, [r1, #20]
 8001a76:	600f      	str	r7, [r1, #0]
 8001a78:	bf18      	it	ne
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	eba6 0807 	sub.w	r8, r6, r7
 8001a80:	608b      	str	r3, [r1, #8]
 8001a82:	f1b8 0f00 	cmp.w	r8, #0
 8001a86:	dd9c      	ble.n	80019c2 <__sflush_r+0x1a>
 8001a88:	4643      	mov	r3, r8
 8001a8a:	463a      	mov	r2, r7
 8001a8c:	6a21      	ldr	r1, [r4, #32]
 8001a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a90:	4628      	mov	r0, r5
 8001a92:	47b0      	blx	r6
 8001a94:	2800      	cmp	r0, #0
 8001a96:	dc06      	bgt.n	8001aa6 <__sflush_r+0xfe>
 8001a98:	89a3      	ldrh	r3, [r4, #12]
 8001a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9e:	81a3      	strh	r3, [r4, #12]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	e78e      	b.n	80019c4 <__sflush_r+0x1c>
 8001aa6:	4407      	add	r7, r0
 8001aa8:	eba8 0800 	sub.w	r8, r8, r0
 8001aac:	e7e9      	b.n	8001a82 <__sflush_r+0xda>
 8001aae:	bf00      	nop
 8001ab0:	20400001 	.word	0x20400001

08001ab4 <_fflush_r>:
 8001ab4:	b538      	push	{r3, r4, r5, lr}
 8001ab6:	690b      	ldr	r3, [r1, #16]
 8001ab8:	4605      	mov	r5, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	b1db      	cbz	r3, 8001af6 <_fflush_r+0x42>
 8001abe:	b118      	cbz	r0, 8001ac8 <_fflush_r+0x14>
 8001ac0:	6983      	ldr	r3, [r0, #24]
 8001ac2:	b90b      	cbnz	r3, 8001ac8 <_fflush_r+0x14>
 8001ac4:	f000 f860 	bl	8001b88 <__sinit>
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <_fflush_r+0x48>)
 8001aca:	429c      	cmp	r4, r3
 8001acc:	d109      	bne.n	8001ae2 <_fflush_r+0x2e>
 8001ace:	686c      	ldr	r4, [r5, #4]
 8001ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ad4:	b17b      	cbz	r3, 8001af6 <_fflush_r+0x42>
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	4628      	mov	r0, r5
 8001ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ade:	f7ff bf63 	b.w	80019a8 <__sflush_r>
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <_fflush_r+0x4c>)
 8001ae4:	429c      	cmp	r4, r3
 8001ae6:	d101      	bne.n	8001aec <_fflush_r+0x38>
 8001ae8:	68ac      	ldr	r4, [r5, #8]
 8001aea:	e7f1      	b.n	8001ad0 <_fflush_r+0x1c>
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <_fflush_r+0x50>)
 8001aee:	429c      	cmp	r4, r3
 8001af0:	bf08      	it	eq
 8001af2:	68ec      	ldreq	r4, [r5, #12]
 8001af4:	e7ec      	b.n	8001ad0 <_fflush_r+0x1c>
 8001af6:	2000      	movs	r0, #0
 8001af8:	bd38      	pop	{r3, r4, r5, pc}
 8001afa:	bf00      	nop
 8001afc:	080026c8 	.word	0x080026c8
 8001b00:	080026e8 	.word	0x080026e8
 8001b04:	080026a8 	.word	0x080026a8

08001b08 <std>:
 8001b08:	2300      	movs	r3, #0
 8001b0a:	b510      	push	{r4, lr}
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8001b12:	6083      	str	r3, [r0, #8]
 8001b14:	8181      	strh	r1, [r0, #12]
 8001b16:	6643      	str	r3, [r0, #100]	; 0x64
 8001b18:	81c2      	strh	r2, [r0, #14]
 8001b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b1e:	6183      	str	r3, [r0, #24]
 8001b20:	4619      	mov	r1, r3
 8001b22:	2208      	movs	r2, #8
 8001b24:	305c      	adds	r0, #92	; 0x5c
 8001b26:	f7ff fd4d 	bl	80015c4 <memset>
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <std+0x38>)
 8001b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <std+0x3c>)
 8001b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <std+0x40>)
 8001b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <std+0x44>)
 8001b38:	6224      	str	r4, [r4, #32]
 8001b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop
 8001b40:	08002475 	.word	0x08002475
 8001b44:	08002497 	.word	0x08002497
 8001b48:	080024cf 	.word	0x080024cf
 8001b4c:	080024f3 	.word	0x080024f3

08001b50 <_cleanup_r>:
 8001b50:	4901      	ldr	r1, [pc, #4]	; (8001b58 <_cleanup_r+0x8>)
 8001b52:	f000 b885 	b.w	8001c60 <_fwalk_reent>
 8001b56:	bf00      	nop
 8001b58:	08001ab5 	.word	0x08001ab5

08001b5c <__sfmoreglue>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	1e4a      	subs	r2, r1, #1
 8001b60:	2568      	movs	r5, #104	; 0x68
 8001b62:	4355      	muls	r5, r2
 8001b64:	460e      	mov	r6, r1
 8001b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b6a:	f000 f951 	bl	8001e10 <_malloc_r>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	b140      	cbz	r0, 8001b84 <__sfmoreglue+0x28>
 8001b72:	2100      	movs	r1, #0
 8001b74:	e9c0 1600 	strd	r1, r6, [r0]
 8001b78:	300c      	adds	r0, #12
 8001b7a:	60a0      	str	r0, [r4, #8]
 8001b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b80:	f7ff fd20 	bl	80015c4 <memset>
 8001b84:	4620      	mov	r0, r4
 8001b86:	bd70      	pop	{r4, r5, r6, pc}

08001b88 <__sinit>:
 8001b88:	6983      	ldr	r3, [r0, #24]
 8001b8a:	b510      	push	{r4, lr}
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	bb33      	cbnz	r3, 8001bde <__sinit+0x56>
 8001b90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001b94:	6503      	str	r3, [r0, #80]	; 0x50
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <__sinit+0x58>)
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <__sinit+0x5c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6282      	str	r2, [r0, #40]	; 0x28
 8001b9e:	4298      	cmp	r0, r3
 8001ba0:	bf04      	itt	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	6183      	streq	r3, [r0, #24]
 8001ba6:	f000 f81f 	bl	8001be8 <__sfp>
 8001baa:	6060      	str	r0, [r4, #4]
 8001bac:	4620      	mov	r0, r4
 8001bae:	f000 f81b 	bl	8001be8 <__sfp>
 8001bb2:	60a0      	str	r0, [r4, #8]
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f000 f817 	bl	8001be8 <__sfp>
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60e0      	str	r0, [r4, #12]
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	6860      	ldr	r0, [r4, #4]
 8001bc2:	f7ff ffa1 	bl	8001b08 <std>
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2109      	movs	r1, #9
 8001bca:	68a0      	ldr	r0, [r4, #8]
 8001bcc:	f7ff ff9c 	bl	8001b08 <std>
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	2112      	movs	r1, #18
 8001bd4:	68e0      	ldr	r0, [r4, #12]
 8001bd6:	f7ff ff97 	bl	8001b08 <std>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61a3      	str	r3, [r4, #24]
 8001bde:	bd10      	pop	{r4, pc}
 8001be0:	080026a4 	.word	0x080026a4
 8001be4:	08001b51 	.word	0x08001b51

08001be8 <__sfp>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <__sfp+0x70>)
 8001bec:	681e      	ldr	r6, [r3, #0]
 8001bee:	69b3      	ldr	r3, [r6, #24]
 8001bf0:	4607      	mov	r7, r0
 8001bf2:	b913      	cbnz	r3, 8001bfa <__sfp+0x12>
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f7ff ffc7 	bl	8001b88 <__sinit>
 8001bfa:	3648      	adds	r6, #72	; 0x48
 8001bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	d503      	bpl.n	8001c0c <__sfp+0x24>
 8001c04:	6833      	ldr	r3, [r6, #0]
 8001c06:	b133      	cbz	r3, 8001c16 <__sfp+0x2e>
 8001c08:	6836      	ldr	r6, [r6, #0]
 8001c0a:	e7f7      	b.n	8001bfc <__sfp+0x14>
 8001c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c10:	b16d      	cbz	r5, 8001c2e <__sfp+0x46>
 8001c12:	3468      	adds	r4, #104	; 0x68
 8001c14:	e7f4      	b.n	8001c00 <__sfp+0x18>
 8001c16:	2104      	movs	r1, #4
 8001c18:	4638      	mov	r0, r7
 8001c1a:	f7ff ff9f 	bl	8001b5c <__sfmoreglue>
 8001c1e:	6030      	str	r0, [r6, #0]
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d1f1      	bne.n	8001c08 <__sfp+0x20>
 8001c24:	230c      	movs	r3, #12
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	4604      	mov	r4, r0
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <__sfp+0x74>)
 8001c30:	6665      	str	r5, [r4, #100]	; 0x64
 8001c32:	e9c4 5500 	strd	r5, r5, [r4]
 8001c36:	60a5      	str	r5, [r4, #8]
 8001c38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001c3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001c40:	2208      	movs	r2, #8
 8001c42:	4629      	mov	r1, r5
 8001c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c48:	f7ff fcbc 	bl	80015c4 <memset>
 8001c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c54:	e7e9      	b.n	8001c2a <__sfp+0x42>
 8001c56:	bf00      	nop
 8001c58:	080026a4 	.word	0x080026a4
 8001c5c:	ffff0001 	.word	0xffff0001

08001c60 <_fwalk_reent>:
 8001c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c64:	4680      	mov	r8, r0
 8001c66:	4689      	mov	r9, r1
 8001c68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c6c:	2600      	movs	r6, #0
 8001c6e:	b914      	cbnz	r4, 8001c76 <_fwalk_reent+0x16>
 8001c70:	4630      	mov	r0, r6
 8001c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001c7a:	3f01      	subs	r7, #1
 8001c7c:	d501      	bpl.n	8001c82 <_fwalk_reent+0x22>
 8001c7e:	6824      	ldr	r4, [r4, #0]
 8001c80:	e7f5      	b.n	8001c6e <_fwalk_reent+0xe>
 8001c82:	89ab      	ldrh	r3, [r5, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d907      	bls.n	8001c98 <_fwalk_reent+0x38>
 8001c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	d003      	beq.n	8001c98 <_fwalk_reent+0x38>
 8001c90:	4629      	mov	r1, r5
 8001c92:	4640      	mov	r0, r8
 8001c94:	47c8      	blx	r9
 8001c96:	4306      	orrs	r6, r0
 8001c98:	3568      	adds	r5, #104	; 0x68
 8001c9a:	e7ee      	b.n	8001c7a <_fwalk_reent+0x1a>

08001c9c <__swhatbuf_r>:
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	460e      	mov	r6, r1
 8001ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	b096      	sub	sp, #88	; 0x58
 8001ca8:	4614      	mov	r4, r2
 8001caa:	461d      	mov	r5, r3
 8001cac:	da07      	bge.n	8001cbe <__swhatbuf_r+0x22>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	602b      	str	r3, [r5, #0]
 8001cb2:	89b3      	ldrh	r3, [r6, #12]
 8001cb4:	061a      	lsls	r2, r3, #24
 8001cb6:	d410      	bmi.n	8001cda <__swhatbuf_r+0x3e>
 8001cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbc:	e00e      	b.n	8001cdc <__swhatbuf_r+0x40>
 8001cbe:	466a      	mov	r2, sp
 8001cc0:	f000 fc3e 	bl	8002540 <_fstat_r>
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	dbf2      	blt.n	8001cae <__swhatbuf_r+0x12>
 8001cc8:	9a01      	ldr	r2, [sp, #4]
 8001cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001cd2:	425a      	negs	r2, r3
 8001cd4:	415a      	adcs	r2, r3
 8001cd6:	602a      	str	r2, [r5, #0]
 8001cd8:	e7ee      	b.n	8001cb8 <__swhatbuf_r+0x1c>
 8001cda:	2340      	movs	r3, #64	; 0x40
 8001cdc:	2000      	movs	r0, #0
 8001cde:	6023      	str	r3, [r4, #0]
 8001ce0:	b016      	add	sp, #88	; 0x58
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}

08001ce4 <__smakebuf_r>:
 8001ce4:	898b      	ldrh	r3, [r1, #12]
 8001ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ce8:	079d      	lsls	r5, r3, #30
 8001cea:	4606      	mov	r6, r0
 8001cec:	460c      	mov	r4, r1
 8001cee:	d507      	bpl.n	8001d00 <__smakebuf_r+0x1c>
 8001cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cf4:	6023      	str	r3, [r4, #0]
 8001cf6:	6123      	str	r3, [r4, #16]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	6163      	str	r3, [r4, #20]
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
 8001d00:	ab01      	add	r3, sp, #4
 8001d02:	466a      	mov	r2, sp
 8001d04:	f7ff ffca 	bl	8001c9c <__swhatbuf_r>
 8001d08:	9900      	ldr	r1, [sp, #0]
 8001d0a:	4605      	mov	r5, r0
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f000 f87f 	bl	8001e10 <_malloc_r>
 8001d12:	b948      	cbnz	r0, 8001d28 <__smakebuf_r+0x44>
 8001d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d18:	059a      	lsls	r2, r3, #22
 8001d1a:	d4ef      	bmi.n	8001cfc <__smakebuf_r+0x18>
 8001d1c:	f023 0303 	bic.w	r3, r3, #3
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	81a3      	strh	r3, [r4, #12]
 8001d26:	e7e3      	b.n	8001cf0 <__smakebuf_r+0xc>
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <__smakebuf_r+0x7c>)
 8001d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d2c:	89a3      	ldrh	r3, [r4, #12]
 8001d2e:	6020      	str	r0, [r4, #0]
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	81a3      	strh	r3, [r4, #12]
 8001d36:	9b00      	ldr	r3, [sp, #0]
 8001d38:	6163      	str	r3, [r4, #20]
 8001d3a:	9b01      	ldr	r3, [sp, #4]
 8001d3c:	6120      	str	r0, [r4, #16]
 8001d3e:	b15b      	cbz	r3, 8001d58 <__smakebuf_r+0x74>
 8001d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d44:	4630      	mov	r0, r6
 8001d46:	f000 fc0d 	bl	8002564 <_isatty_r>
 8001d4a:	b128      	cbz	r0, 8001d58 <__smakebuf_r+0x74>
 8001d4c:	89a3      	ldrh	r3, [r4, #12]
 8001d4e:	f023 0303 	bic.w	r3, r3, #3
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	81a3      	strh	r3, [r4, #12]
 8001d58:	89a3      	ldrh	r3, [r4, #12]
 8001d5a:	431d      	orrs	r5, r3
 8001d5c:	81a5      	strh	r5, [r4, #12]
 8001d5e:	e7cd      	b.n	8001cfc <__smakebuf_r+0x18>
 8001d60:	08001b51 	.word	0x08001b51

08001d64 <malloc>:
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <malloc+0xc>)
 8001d66:	4601      	mov	r1, r0
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	f000 b851 	b.w	8001e10 <_malloc_r>
 8001d6e:	bf00      	nop
 8001d70:	2000000c 	.word	0x2000000c

08001d74 <_free_r>:
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	4605      	mov	r5, r0
 8001d78:	2900      	cmp	r1, #0
 8001d7a:	d045      	beq.n	8001e08 <_free_r+0x94>
 8001d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d80:	1f0c      	subs	r4, r1, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bfb8      	it	lt
 8001d86:	18e4      	addlt	r4, r4, r3
 8001d88:	f000 fc0e 	bl	80025a8 <__malloc_lock>
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <_free_r+0x98>)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	4610      	mov	r0, r2
 8001d92:	b933      	cbnz	r3, 8001da2 <_free_r+0x2e>
 8001d94:	6063      	str	r3, [r4, #4]
 8001d96:	6014      	str	r4, [r2, #0]
 8001d98:	4628      	mov	r0, r5
 8001d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d9e:	f000 bc04 	b.w	80025aa <__malloc_unlock>
 8001da2:	42a3      	cmp	r3, r4
 8001da4:	d90c      	bls.n	8001dc0 <_free_r+0x4c>
 8001da6:	6821      	ldr	r1, [r4, #0]
 8001da8:	1862      	adds	r2, r4, r1
 8001daa:	4293      	cmp	r3, r2
 8001dac:	bf04      	itt	eq
 8001dae:	681a      	ldreq	r2, [r3, #0]
 8001db0:	685b      	ldreq	r3, [r3, #4]
 8001db2:	6063      	str	r3, [r4, #4]
 8001db4:	bf04      	itt	eq
 8001db6:	1852      	addeq	r2, r2, r1
 8001db8:	6022      	streq	r2, [r4, #0]
 8001dba:	6004      	str	r4, [r0, #0]
 8001dbc:	e7ec      	b.n	8001d98 <_free_r+0x24>
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	b10a      	cbz	r2, 8001dc8 <_free_r+0x54>
 8001dc4:	42a2      	cmp	r2, r4
 8001dc6:	d9fa      	bls.n	8001dbe <_free_r+0x4a>
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	1858      	adds	r0, r3, r1
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	d10b      	bne.n	8001de8 <_free_r+0x74>
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	4401      	add	r1, r0
 8001dd4:	1858      	adds	r0, r3, r1
 8001dd6:	4282      	cmp	r2, r0
 8001dd8:	6019      	str	r1, [r3, #0]
 8001dda:	d1dd      	bne.n	8001d98 <_free_r+0x24>
 8001ddc:	6810      	ldr	r0, [r2, #0]
 8001dde:	6852      	ldr	r2, [r2, #4]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	4401      	add	r1, r0
 8001de4:	6019      	str	r1, [r3, #0]
 8001de6:	e7d7      	b.n	8001d98 <_free_r+0x24>
 8001de8:	d902      	bls.n	8001df0 <_free_r+0x7c>
 8001dea:	230c      	movs	r3, #12
 8001dec:	602b      	str	r3, [r5, #0]
 8001dee:	e7d3      	b.n	8001d98 <_free_r+0x24>
 8001df0:	6820      	ldr	r0, [r4, #0]
 8001df2:	1821      	adds	r1, r4, r0
 8001df4:	428a      	cmp	r2, r1
 8001df6:	bf04      	itt	eq
 8001df8:	6811      	ldreq	r1, [r2, #0]
 8001dfa:	6852      	ldreq	r2, [r2, #4]
 8001dfc:	6062      	str	r2, [r4, #4]
 8001dfe:	bf04      	itt	eq
 8001e00:	1809      	addeq	r1, r1, r0
 8001e02:	6021      	streq	r1, [r4, #0]
 8001e04:	605c      	str	r4, [r3, #4]
 8001e06:	e7c7      	b.n	8001d98 <_free_r+0x24>
 8001e08:	bd38      	pop	{r3, r4, r5, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200000ac 	.word	0x200000ac

08001e10 <_malloc_r>:
 8001e10:	b570      	push	{r4, r5, r6, lr}
 8001e12:	1ccd      	adds	r5, r1, #3
 8001e14:	f025 0503 	bic.w	r5, r5, #3
 8001e18:	3508      	adds	r5, #8
 8001e1a:	2d0c      	cmp	r5, #12
 8001e1c:	bf38      	it	cc
 8001e1e:	250c      	movcc	r5, #12
 8001e20:	2d00      	cmp	r5, #0
 8001e22:	4606      	mov	r6, r0
 8001e24:	db01      	blt.n	8001e2a <_malloc_r+0x1a>
 8001e26:	42a9      	cmp	r1, r5
 8001e28:	d903      	bls.n	8001e32 <_malloc_r+0x22>
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	6033      	str	r3, [r6, #0]
 8001e2e:	2000      	movs	r0, #0
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
 8001e32:	f000 fbb9 	bl	80025a8 <__malloc_lock>
 8001e36:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <_malloc_r+0xac>)
 8001e38:	6814      	ldr	r4, [r2, #0]
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	b991      	cbnz	r1, 8001e64 <_malloc_r+0x54>
 8001e3e:	4c20      	ldr	r4, [pc, #128]	; (8001ec0 <_malloc_r+0xb0>)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	b91b      	cbnz	r3, 8001e4c <_malloc_r+0x3c>
 8001e44:	4630      	mov	r0, r6
 8001e46:	f000 fb05 	bl	8002454 <_sbrk_r>
 8001e4a:	6020      	str	r0, [r4, #0]
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	4630      	mov	r0, r6
 8001e50:	f000 fb00 	bl	8002454 <_sbrk_r>
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	d124      	bne.n	8001ea2 <_malloc_r+0x92>
 8001e58:	230c      	movs	r3, #12
 8001e5a:	6033      	str	r3, [r6, #0]
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f000 fba4 	bl	80025aa <__malloc_unlock>
 8001e62:	e7e4      	b.n	8001e2e <_malloc_r+0x1e>
 8001e64:	680b      	ldr	r3, [r1, #0]
 8001e66:	1b5b      	subs	r3, r3, r5
 8001e68:	d418      	bmi.n	8001e9c <_malloc_r+0x8c>
 8001e6a:	2b0b      	cmp	r3, #11
 8001e6c:	d90f      	bls.n	8001e8e <_malloc_r+0x7e>
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	50cd      	str	r5, [r1, r3]
 8001e72:	18cc      	adds	r4, r1, r3
 8001e74:	4630      	mov	r0, r6
 8001e76:	f000 fb98 	bl	80025aa <__malloc_unlock>
 8001e7a:	f104 000b 	add.w	r0, r4, #11
 8001e7e:	1d23      	adds	r3, r4, #4
 8001e80:	f020 0007 	bic.w	r0, r0, #7
 8001e84:	1ac3      	subs	r3, r0, r3
 8001e86:	d0d3      	beq.n	8001e30 <_malloc_r+0x20>
 8001e88:	425a      	negs	r2, r3
 8001e8a:	50e2      	str	r2, [r4, r3]
 8001e8c:	e7d0      	b.n	8001e30 <_malloc_r+0x20>
 8001e8e:	428c      	cmp	r4, r1
 8001e90:	684b      	ldr	r3, [r1, #4]
 8001e92:	bf16      	itet	ne
 8001e94:	6063      	strne	r3, [r4, #4]
 8001e96:	6013      	streq	r3, [r2, #0]
 8001e98:	460c      	movne	r4, r1
 8001e9a:	e7eb      	b.n	8001e74 <_malloc_r+0x64>
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	6849      	ldr	r1, [r1, #4]
 8001ea0:	e7cc      	b.n	8001e3c <_malloc_r+0x2c>
 8001ea2:	1cc4      	adds	r4, r0, #3
 8001ea4:	f024 0403 	bic.w	r4, r4, #3
 8001ea8:	42a0      	cmp	r0, r4
 8001eaa:	d005      	beq.n	8001eb8 <_malloc_r+0xa8>
 8001eac:	1a21      	subs	r1, r4, r0
 8001eae:	4630      	mov	r0, r6
 8001eb0:	f000 fad0 	bl	8002454 <_sbrk_r>
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d0cf      	beq.n	8001e58 <_malloc_r+0x48>
 8001eb8:	6025      	str	r5, [r4, #0]
 8001eba:	e7db      	b.n	8001e74 <_malloc_r+0x64>
 8001ebc:	200000ac 	.word	0x200000ac
 8001ec0:	200000b0 	.word	0x200000b0

08001ec4 <__sfputc_r>:
 8001ec4:	6893      	ldr	r3, [r2, #8]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	b410      	push	{r4}
 8001ecc:	6093      	str	r3, [r2, #8]
 8001ece:	da08      	bge.n	8001ee2 <__sfputc_r+0x1e>
 8001ed0:	6994      	ldr	r4, [r2, #24]
 8001ed2:	42a3      	cmp	r3, r4
 8001ed4:	db01      	blt.n	8001eda <__sfputc_r+0x16>
 8001ed6:	290a      	cmp	r1, #10
 8001ed8:	d103      	bne.n	8001ee2 <__sfputc_r+0x1e>
 8001eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ede:	f7ff bca3 	b.w	8001828 <__swbuf_r>
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	1c58      	adds	r0, r3, #1
 8001ee6:	6010      	str	r0, [r2, #0]
 8001ee8:	7019      	strb	r1, [r3, #0]
 8001eea:	4608      	mov	r0, r1
 8001eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <__sfputs_r>:
 8001ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef4:	4606      	mov	r6, r0
 8001ef6:	460f      	mov	r7, r1
 8001ef8:	4614      	mov	r4, r2
 8001efa:	18d5      	adds	r5, r2, r3
 8001efc:	42ac      	cmp	r4, r5
 8001efe:	d101      	bne.n	8001f04 <__sfputs_r+0x12>
 8001f00:	2000      	movs	r0, #0
 8001f02:	e007      	b.n	8001f14 <__sfputs_r+0x22>
 8001f04:	463a      	mov	r2, r7
 8001f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f0a:	4630      	mov	r0, r6
 8001f0c:	f7ff ffda 	bl	8001ec4 <__sfputc_r>
 8001f10:	1c43      	adds	r3, r0, #1
 8001f12:	d1f3      	bne.n	8001efc <__sfputs_r+0xa>
 8001f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f18 <_vfiprintf_r>:
 8001f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f1c:	460c      	mov	r4, r1
 8001f1e:	b09d      	sub	sp, #116	; 0x74
 8001f20:	4617      	mov	r7, r2
 8001f22:	461d      	mov	r5, r3
 8001f24:	4606      	mov	r6, r0
 8001f26:	b118      	cbz	r0, 8001f30 <_vfiprintf_r+0x18>
 8001f28:	6983      	ldr	r3, [r0, #24]
 8001f2a:	b90b      	cbnz	r3, 8001f30 <_vfiprintf_r+0x18>
 8001f2c:	f7ff fe2c 	bl	8001b88 <__sinit>
 8001f30:	4b7c      	ldr	r3, [pc, #496]	; (8002124 <_vfiprintf_r+0x20c>)
 8001f32:	429c      	cmp	r4, r3
 8001f34:	d158      	bne.n	8001fe8 <_vfiprintf_r+0xd0>
 8001f36:	6874      	ldr	r4, [r6, #4]
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	0718      	lsls	r0, r3, #28
 8001f3c:	d55e      	bpl.n	8001ffc <_vfiprintf_r+0xe4>
 8001f3e:	6923      	ldr	r3, [r4, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d05b      	beq.n	8001ffc <_vfiprintf_r+0xe4>
 8001f44:	2300      	movs	r3, #0
 8001f46:	9309      	str	r3, [sp, #36]	; 0x24
 8001f48:	2320      	movs	r3, #32
 8001f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f4e:	2330      	movs	r3, #48	; 0x30
 8001f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f54:	9503      	str	r5, [sp, #12]
 8001f56:	f04f 0b01 	mov.w	fp, #1
 8001f5a:	46b8      	mov	r8, r7
 8001f5c:	4645      	mov	r5, r8
 8001f5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f62:	b10b      	cbz	r3, 8001f68 <_vfiprintf_r+0x50>
 8001f64:	2b25      	cmp	r3, #37	; 0x25
 8001f66:	d154      	bne.n	8002012 <_vfiprintf_r+0xfa>
 8001f68:	ebb8 0a07 	subs.w	sl, r8, r7
 8001f6c:	d00b      	beq.n	8001f86 <_vfiprintf_r+0x6e>
 8001f6e:	4653      	mov	r3, sl
 8001f70:	463a      	mov	r2, r7
 8001f72:	4621      	mov	r1, r4
 8001f74:	4630      	mov	r0, r6
 8001f76:	f7ff ffbc 	bl	8001ef2 <__sfputs_r>
 8001f7a:	3001      	adds	r0, #1
 8001f7c:	f000 80c2 	beq.w	8002104 <_vfiprintf_r+0x1ec>
 8001f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f82:	4453      	add	r3, sl
 8001f84:	9309      	str	r3, [sp, #36]	; 0x24
 8001f86:	f898 3000 	ldrb.w	r3, [r8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80ba 	beq.w	8002104 <_vfiprintf_r+0x1ec>
 8001f90:	2300      	movs	r3, #0
 8001f92:	f04f 32ff 	mov.w	r2, #4294967295
 8001f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f9a:	9304      	str	r3, [sp, #16]
 8001f9c:	9307      	str	r3, [sp, #28]
 8001f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8001fa4:	46a8      	mov	r8, r5
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001fac:	485e      	ldr	r0, [pc, #376]	; (8002128 <_vfiprintf_r+0x210>)
 8001fae:	f7fe f917 	bl	80001e0 <memchr>
 8001fb2:	9b04      	ldr	r3, [sp, #16]
 8001fb4:	bb78      	cbnz	r0, 8002016 <_vfiprintf_r+0xfe>
 8001fb6:	06d9      	lsls	r1, r3, #27
 8001fb8:	bf44      	itt	mi
 8001fba:	2220      	movmi	r2, #32
 8001fbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fc0:	071a      	lsls	r2, r3, #28
 8001fc2:	bf44      	itt	mi
 8001fc4:	222b      	movmi	r2, #43	; 0x2b
 8001fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fca:	782a      	ldrb	r2, [r5, #0]
 8001fcc:	2a2a      	cmp	r2, #42	; 0x2a
 8001fce:	d02a      	beq.n	8002026 <_vfiprintf_r+0x10e>
 8001fd0:	9a07      	ldr	r2, [sp, #28]
 8001fd2:	46a8      	mov	r8, r5
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	250a      	movs	r5, #10
 8001fd8:	4641      	mov	r1, r8
 8001fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fde:	3b30      	subs	r3, #48	; 0x30
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	d969      	bls.n	80020b8 <_vfiprintf_r+0x1a0>
 8001fe4:	b360      	cbz	r0, 8002040 <_vfiprintf_r+0x128>
 8001fe6:	e024      	b.n	8002032 <_vfiprintf_r+0x11a>
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <_vfiprintf_r+0x214>)
 8001fea:	429c      	cmp	r4, r3
 8001fec:	d101      	bne.n	8001ff2 <_vfiprintf_r+0xda>
 8001fee:	68b4      	ldr	r4, [r6, #8]
 8001ff0:	e7a2      	b.n	8001f38 <_vfiprintf_r+0x20>
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <_vfiprintf_r+0x218>)
 8001ff4:	429c      	cmp	r4, r3
 8001ff6:	bf08      	it	eq
 8001ff8:	68f4      	ldreq	r4, [r6, #12]
 8001ffa:	e79d      	b.n	8001f38 <_vfiprintf_r+0x20>
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	4630      	mov	r0, r6
 8002000:	f7ff fc64 	bl	80018cc <__swsetup_r>
 8002004:	2800      	cmp	r0, #0
 8002006:	d09d      	beq.n	8001f44 <_vfiprintf_r+0x2c>
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	b01d      	add	sp, #116	; 0x74
 800200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002012:	46a8      	mov	r8, r5
 8002014:	e7a2      	b.n	8001f5c <_vfiprintf_r+0x44>
 8002016:	4a44      	ldr	r2, [pc, #272]	; (8002128 <_vfiprintf_r+0x210>)
 8002018:	1a80      	subs	r0, r0, r2
 800201a:	fa0b f000 	lsl.w	r0, fp, r0
 800201e:	4318      	orrs	r0, r3
 8002020:	9004      	str	r0, [sp, #16]
 8002022:	4645      	mov	r5, r8
 8002024:	e7be      	b.n	8001fa4 <_vfiprintf_r+0x8c>
 8002026:	9a03      	ldr	r2, [sp, #12]
 8002028:	1d11      	adds	r1, r2, #4
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	9103      	str	r1, [sp, #12]
 800202e:	2a00      	cmp	r2, #0
 8002030:	db01      	blt.n	8002036 <_vfiprintf_r+0x11e>
 8002032:	9207      	str	r2, [sp, #28]
 8002034:	e004      	b.n	8002040 <_vfiprintf_r+0x128>
 8002036:	4252      	negs	r2, r2
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	9207      	str	r2, [sp, #28]
 800203e:	9304      	str	r3, [sp, #16]
 8002040:	f898 3000 	ldrb.w	r3, [r8]
 8002044:	2b2e      	cmp	r3, #46	; 0x2e
 8002046:	d10e      	bne.n	8002066 <_vfiprintf_r+0x14e>
 8002048:	f898 3001 	ldrb.w	r3, [r8, #1]
 800204c:	2b2a      	cmp	r3, #42	; 0x2a
 800204e:	d138      	bne.n	80020c2 <_vfiprintf_r+0x1aa>
 8002050:	9b03      	ldr	r3, [sp, #12]
 8002052:	1d1a      	adds	r2, r3, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	9203      	str	r2, [sp, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	bfb8      	it	lt
 800205c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002060:	f108 0802 	add.w	r8, r8, #2
 8002064:	9305      	str	r3, [sp, #20]
 8002066:	4d33      	ldr	r5, [pc, #204]	; (8002134 <_vfiprintf_r+0x21c>)
 8002068:	f898 1000 	ldrb.w	r1, [r8]
 800206c:	2203      	movs	r2, #3
 800206e:	4628      	mov	r0, r5
 8002070:	f7fe f8b6 	bl	80001e0 <memchr>
 8002074:	b140      	cbz	r0, 8002088 <_vfiprintf_r+0x170>
 8002076:	2340      	movs	r3, #64	; 0x40
 8002078:	1b40      	subs	r0, r0, r5
 800207a:	fa03 f000 	lsl.w	r0, r3, r0
 800207e:	9b04      	ldr	r3, [sp, #16]
 8002080:	4303      	orrs	r3, r0
 8002082:	f108 0801 	add.w	r8, r8, #1
 8002086:	9304      	str	r3, [sp, #16]
 8002088:	f898 1000 	ldrb.w	r1, [r8]
 800208c:	482a      	ldr	r0, [pc, #168]	; (8002138 <_vfiprintf_r+0x220>)
 800208e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002092:	2206      	movs	r2, #6
 8002094:	f108 0701 	add.w	r7, r8, #1
 8002098:	f7fe f8a2 	bl	80001e0 <memchr>
 800209c:	2800      	cmp	r0, #0
 800209e:	d037      	beq.n	8002110 <_vfiprintf_r+0x1f8>
 80020a0:	4b26      	ldr	r3, [pc, #152]	; (800213c <_vfiprintf_r+0x224>)
 80020a2:	bb1b      	cbnz	r3, 80020ec <_vfiprintf_r+0x1d4>
 80020a4:	9b03      	ldr	r3, [sp, #12]
 80020a6:	3307      	adds	r3, #7
 80020a8:	f023 0307 	bic.w	r3, r3, #7
 80020ac:	3308      	adds	r3, #8
 80020ae:	9303      	str	r3, [sp, #12]
 80020b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020b2:	444b      	add	r3, r9
 80020b4:	9309      	str	r3, [sp, #36]	; 0x24
 80020b6:	e750      	b.n	8001f5a <_vfiprintf_r+0x42>
 80020b8:	fb05 3202 	mla	r2, r5, r2, r3
 80020bc:	2001      	movs	r0, #1
 80020be:	4688      	mov	r8, r1
 80020c0:	e78a      	b.n	8001fd8 <_vfiprintf_r+0xc0>
 80020c2:	2300      	movs	r3, #0
 80020c4:	f108 0801 	add.w	r8, r8, #1
 80020c8:	9305      	str	r3, [sp, #20]
 80020ca:	4619      	mov	r1, r3
 80020cc:	250a      	movs	r5, #10
 80020ce:	4640      	mov	r0, r8
 80020d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020d4:	3a30      	subs	r2, #48	; 0x30
 80020d6:	2a09      	cmp	r2, #9
 80020d8:	d903      	bls.n	80020e2 <_vfiprintf_r+0x1ca>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0c3      	beq.n	8002066 <_vfiprintf_r+0x14e>
 80020de:	9105      	str	r1, [sp, #20]
 80020e0:	e7c1      	b.n	8002066 <_vfiprintf_r+0x14e>
 80020e2:	fb05 2101 	mla	r1, r5, r1, r2
 80020e6:	2301      	movs	r3, #1
 80020e8:	4680      	mov	r8, r0
 80020ea:	e7f0      	b.n	80020ce <_vfiprintf_r+0x1b6>
 80020ec:	ab03      	add	r3, sp, #12
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4622      	mov	r2, r4
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <_vfiprintf_r+0x228>)
 80020f4:	a904      	add	r1, sp, #16
 80020f6:	4630      	mov	r0, r6
 80020f8:	f3af 8000 	nop.w
 80020fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002100:	4681      	mov	r9, r0
 8002102:	d1d5      	bne.n	80020b0 <_vfiprintf_r+0x198>
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	065b      	lsls	r3, r3, #25
 8002108:	f53f af7e 	bmi.w	8002008 <_vfiprintf_r+0xf0>
 800210c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800210e:	e77d      	b.n	800200c <_vfiprintf_r+0xf4>
 8002110:	ab03      	add	r3, sp, #12
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4622      	mov	r2, r4
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <_vfiprintf_r+0x228>)
 8002118:	a904      	add	r1, sp, #16
 800211a:	4630      	mov	r0, r6
 800211c:	f000 f888 	bl	8002230 <_printf_i>
 8002120:	e7ec      	b.n	80020fc <_vfiprintf_r+0x1e4>
 8002122:	bf00      	nop
 8002124:	080026c8 	.word	0x080026c8
 8002128:	08002708 	.word	0x08002708
 800212c:	080026e8 	.word	0x080026e8
 8002130:	080026a8 	.word	0x080026a8
 8002134:	0800270e 	.word	0x0800270e
 8002138:	08002712 	.word	0x08002712
 800213c:	00000000 	.word	0x00000000
 8002140:	08001ef3 	.word	0x08001ef3

08002144 <_printf_common>:
 8002144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002148:	4691      	mov	r9, r2
 800214a:	461f      	mov	r7, r3
 800214c:	688a      	ldr	r2, [r1, #8]
 800214e:	690b      	ldr	r3, [r1, #16]
 8002150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002154:	4293      	cmp	r3, r2
 8002156:	bfb8      	it	lt
 8002158:	4613      	movlt	r3, r2
 800215a:	f8c9 3000 	str.w	r3, [r9]
 800215e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002162:	4606      	mov	r6, r0
 8002164:	460c      	mov	r4, r1
 8002166:	b112      	cbz	r2, 800216e <_printf_common+0x2a>
 8002168:	3301      	adds	r3, #1
 800216a:	f8c9 3000 	str.w	r3, [r9]
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	0699      	lsls	r1, r3, #26
 8002172:	bf42      	ittt	mi
 8002174:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002178:	3302      	addmi	r3, #2
 800217a:	f8c9 3000 	strmi.w	r3, [r9]
 800217e:	6825      	ldr	r5, [r4, #0]
 8002180:	f015 0506 	ands.w	r5, r5, #6
 8002184:	d107      	bne.n	8002196 <_printf_common+0x52>
 8002186:	f104 0a19 	add.w	sl, r4, #25
 800218a:	68e3      	ldr	r3, [r4, #12]
 800218c:	f8d9 2000 	ldr.w	r2, [r9]
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	42ab      	cmp	r3, r5
 8002194:	dc28      	bgt.n	80021e8 <_printf_common+0xa4>
 8002196:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800219a:	6822      	ldr	r2, [r4, #0]
 800219c:	3300      	adds	r3, #0
 800219e:	bf18      	it	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	0692      	lsls	r2, r2, #26
 80021a4:	d42d      	bmi.n	8002202 <_printf_common+0xbe>
 80021a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021aa:	4639      	mov	r1, r7
 80021ac:	4630      	mov	r0, r6
 80021ae:	47c0      	blx	r8
 80021b0:	3001      	adds	r0, #1
 80021b2:	d020      	beq.n	80021f6 <_printf_common+0xb2>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	68e5      	ldr	r5, [r4, #12]
 80021b8:	f8d9 2000 	ldr.w	r2, [r9]
 80021bc:	f003 0306 	and.w	r3, r3, #6
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	bf08      	it	eq
 80021c4:	1aad      	subeq	r5, r5, r2
 80021c6:	68a3      	ldr	r3, [r4, #8]
 80021c8:	6922      	ldr	r2, [r4, #16]
 80021ca:	bf0c      	ite	eq
 80021cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021d0:	2500      	movne	r5, #0
 80021d2:	4293      	cmp	r3, r2
 80021d4:	bfc4      	itt	gt
 80021d6:	1a9b      	subgt	r3, r3, r2
 80021d8:	18ed      	addgt	r5, r5, r3
 80021da:	f04f 0900 	mov.w	r9, #0
 80021de:	341a      	adds	r4, #26
 80021e0:	454d      	cmp	r5, r9
 80021e2:	d11a      	bne.n	800221a <_printf_common+0xd6>
 80021e4:	2000      	movs	r0, #0
 80021e6:	e008      	b.n	80021fa <_printf_common+0xb6>
 80021e8:	2301      	movs	r3, #1
 80021ea:	4652      	mov	r2, sl
 80021ec:	4639      	mov	r1, r7
 80021ee:	4630      	mov	r0, r6
 80021f0:	47c0      	blx	r8
 80021f2:	3001      	adds	r0, #1
 80021f4:	d103      	bne.n	80021fe <_printf_common+0xba>
 80021f6:	f04f 30ff 	mov.w	r0, #4294967295
 80021fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021fe:	3501      	adds	r5, #1
 8002200:	e7c3      	b.n	800218a <_printf_common+0x46>
 8002202:	18e1      	adds	r1, r4, r3
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	2030      	movs	r0, #48	; 0x30
 8002208:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800220c:	4422      	add	r2, r4
 800220e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002212:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002216:	3302      	adds	r3, #2
 8002218:	e7c5      	b.n	80021a6 <_printf_common+0x62>
 800221a:	2301      	movs	r3, #1
 800221c:	4622      	mov	r2, r4
 800221e:	4639      	mov	r1, r7
 8002220:	4630      	mov	r0, r6
 8002222:	47c0      	blx	r8
 8002224:	3001      	adds	r0, #1
 8002226:	d0e6      	beq.n	80021f6 <_printf_common+0xb2>
 8002228:	f109 0901 	add.w	r9, r9, #1
 800222c:	e7d8      	b.n	80021e0 <_printf_common+0x9c>
	...

08002230 <_printf_i>:
 8002230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002234:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002238:	460c      	mov	r4, r1
 800223a:	7e09      	ldrb	r1, [r1, #24]
 800223c:	b085      	sub	sp, #20
 800223e:	296e      	cmp	r1, #110	; 0x6e
 8002240:	4617      	mov	r7, r2
 8002242:	4606      	mov	r6, r0
 8002244:	4698      	mov	r8, r3
 8002246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002248:	f000 80b3 	beq.w	80023b2 <_printf_i+0x182>
 800224c:	d822      	bhi.n	8002294 <_printf_i+0x64>
 800224e:	2963      	cmp	r1, #99	; 0x63
 8002250:	d036      	beq.n	80022c0 <_printf_i+0x90>
 8002252:	d80a      	bhi.n	800226a <_printf_i+0x3a>
 8002254:	2900      	cmp	r1, #0
 8002256:	f000 80b9 	beq.w	80023cc <_printf_i+0x19c>
 800225a:	2958      	cmp	r1, #88	; 0x58
 800225c:	f000 8083 	beq.w	8002366 <_printf_i+0x136>
 8002260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002264:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002268:	e032      	b.n	80022d0 <_printf_i+0xa0>
 800226a:	2964      	cmp	r1, #100	; 0x64
 800226c:	d001      	beq.n	8002272 <_printf_i+0x42>
 800226e:	2969      	cmp	r1, #105	; 0x69
 8002270:	d1f6      	bne.n	8002260 <_printf_i+0x30>
 8002272:	6820      	ldr	r0, [r4, #0]
 8002274:	6813      	ldr	r3, [r2, #0]
 8002276:	0605      	lsls	r5, r0, #24
 8002278:	f103 0104 	add.w	r1, r3, #4
 800227c:	d52a      	bpl.n	80022d4 <_printf_i+0xa4>
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6011      	str	r1, [r2, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	da03      	bge.n	800228e <_printf_i+0x5e>
 8002286:	222d      	movs	r2, #45	; 0x2d
 8002288:	425b      	negs	r3, r3
 800228a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800228e:	486f      	ldr	r0, [pc, #444]	; (800244c <_printf_i+0x21c>)
 8002290:	220a      	movs	r2, #10
 8002292:	e039      	b.n	8002308 <_printf_i+0xd8>
 8002294:	2973      	cmp	r1, #115	; 0x73
 8002296:	f000 809d 	beq.w	80023d4 <_printf_i+0x1a4>
 800229a:	d808      	bhi.n	80022ae <_printf_i+0x7e>
 800229c:	296f      	cmp	r1, #111	; 0x6f
 800229e:	d020      	beq.n	80022e2 <_printf_i+0xb2>
 80022a0:	2970      	cmp	r1, #112	; 0x70
 80022a2:	d1dd      	bne.n	8002260 <_printf_i+0x30>
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	f043 0320 	orr.w	r3, r3, #32
 80022aa:	6023      	str	r3, [r4, #0]
 80022ac:	e003      	b.n	80022b6 <_printf_i+0x86>
 80022ae:	2975      	cmp	r1, #117	; 0x75
 80022b0:	d017      	beq.n	80022e2 <_printf_i+0xb2>
 80022b2:	2978      	cmp	r1, #120	; 0x78
 80022b4:	d1d4      	bne.n	8002260 <_printf_i+0x30>
 80022b6:	2378      	movs	r3, #120	; 0x78
 80022b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022bc:	4864      	ldr	r0, [pc, #400]	; (8002450 <_printf_i+0x220>)
 80022be:	e055      	b.n	800236c <_printf_i+0x13c>
 80022c0:	6813      	ldr	r3, [r2, #0]
 80022c2:	1d19      	adds	r1, r3, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6011      	str	r1, [r2, #0]
 80022c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022d0:	2301      	movs	r3, #1
 80022d2:	e08c      	b.n	80023ee <_printf_i+0x1be>
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6011      	str	r1, [r2, #0]
 80022d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022dc:	bf18      	it	ne
 80022de:	b21b      	sxthne	r3, r3
 80022e0:	e7cf      	b.n	8002282 <_printf_i+0x52>
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	6825      	ldr	r5, [r4, #0]
 80022e6:	1d18      	adds	r0, r3, #4
 80022e8:	6010      	str	r0, [r2, #0]
 80022ea:	0628      	lsls	r0, r5, #24
 80022ec:	d501      	bpl.n	80022f2 <_printf_i+0xc2>
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	e002      	b.n	80022f8 <_printf_i+0xc8>
 80022f2:	0668      	lsls	r0, r5, #25
 80022f4:	d5fb      	bpl.n	80022ee <_printf_i+0xbe>
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	4854      	ldr	r0, [pc, #336]	; (800244c <_printf_i+0x21c>)
 80022fa:	296f      	cmp	r1, #111	; 0x6f
 80022fc:	bf14      	ite	ne
 80022fe:	220a      	movne	r2, #10
 8002300:	2208      	moveq	r2, #8
 8002302:	2100      	movs	r1, #0
 8002304:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002308:	6865      	ldr	r5, [r4, #4]
 800230a:	60a5      	str	r5, [r4, #8]
 800230c:	2d00      	cmp	r5, #0
 800230e:	f2c0 8095 	blt.w	800243c <_printf_i+0x20c>
 8002312:	6821      	ldr	r1, [r4, #0]
 8002314:	f021 0104 	bic.w	r1, r1, #4
 8002318:	6021      	str	r1, [r4, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d13d      	bne.n	800239a <_printf_i+0x16a>
 800231e:	2d00      	cmp	r5, #0
 8002320:	f040 808e 	bne.w	8002440 <_printf_i+0x210>
 8002324:	4665      	mov	r5, ip
 8002326:	2a08      	cmp	r2, #8
 8002328:	d10b      	bne.n	8002342 <_printf_i+0x112>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	07db      	lsls	r3, r3, #31
 800232e:	d508      	bpl.n	8002342 <_printf_i+0x112>
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	6862      	ldr	r2, [r4, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	bfde      	ittt	le
 8002338:	2330      	movle	r3, #48	; 0x30
 800233a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800233e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002342:	ebac 0305 	sub.w	r3, ip, r5
 8002346:	6123      	str	r3, [r4, #16]
 8002348:	f8cd 8000 	str.w	r8, [sp]
 800234c:	463b      	mov	r3, r7
 800234e:	aa03      	add	r2, sp, #12
 8002350:	4621      	mov	r1, r4
 8002352:	4630      	mov	r0, r6
 8002354:	f7ff fef6 	bl	8002144 <_printf_common>
 8002358:	3001      	adds	r0, #1
 800235a:	d14d      	bne.n	80023f8 <_printf_i+0x1c8>
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	b005      	add	sp, #20
 8002362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002366:	4839      	ldr	r0, [pc, #228]	; (800244c <_printf_i+0x21c>)
 8002368:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800236c:	6813      	ldr	r3, [r2, #0]
 800236e:	6821      	ldr	r1, [r4, #0]
 8002370:	1d1d      	adds	r5, r3, #4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6015      	str	r5, [r2, #0]
 8002376:	060a      	lsls	r2, r1, #24
 8002378:	d50b      	bpl.n	8002392 <_printf_i+0x162>
 800237a:	07ca      	lsls	r2, r1, #31
 800237c:	bf44      	itt	mi
 800237e:	f041 0120 	orrmi.w	r1, r1, #32
 8002382:	6021      	strmi	r1, [r4, #0]
 8002384:	b91b      	cbnz	r3, 800238e <_printf_i+0x15e>
 8002386:	6822      	ldr	r2, [r4, #0]
 8002388:	f022 0220 	bic.w	r2, r2, #32
 800238c:	6022      	str	r2, [r4, #0]
 800238e:	2210      	movs	r2, #16
 8002390:	e7b7      	b.n	8002302 <_printf_i+0xd2>
 8002392:	064d      	lsls	r5, r1, #25
 8002394:	bf48      	it	mi
 8002396:	b29b      	uxthmi	r3, r3
 8002398:	e7ef      	b.n	800237a <_printf_i+0x14a>
 800239a:	4665      	mov	r5, ip
 800239c:	fbb3 f1f2 	udiv	r1, r3, r2
 80023a0:	fb02 3311 	mls	r3, r2, r1, r3
 80023a4:	5cc3      	ldrb	r3, [r0, r3]
 80023a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023aa:	460b      	mov	r3, r1
 80023ac:	2900      	cmp	r1, #0
 80023ae:	d1f5      	bne.n	800239c <_printf_i+0x16c>
 80023b0:	e7b9      	b.n	8002326 <_printf_i+0xf6>
 80023b2:	6813      	ldr	r3, [r2, #0]
 80023b4:	6825      	ldr	r5, [r4, #0]
 80023b6:	6961      	ldr	r1, [r4, #20]
 80023b8:	1d18      	adds	r0, r3, #4
 80023ba:	6010      	str	r0, [r2, #0]
 80023bc:	0628      	lsls	r0, r5, #24
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	d501      	bpl.n	80023c6 <_printf_i+0x196>
 80023c2:	6019      	str	r1, [r3, #0]
 80023c4:	e002      	b.n	80023cc <_printf_i+0x19c>
 80023c6:	066a      	lsls	r2, r5, #25
 80023c8:	d5fb      	bpl.n	80023c2 <_printf_i+0x192>
 80023ca:	8019      	strh	r1, [r3, #0]
 80023cc:	2300      	movs	r3, #0
 80023ce:	6123      	str	r3, [r4, #16]
 80023d0:	4665      	mov	r5, ip
 80023d2:	e7b9      	b.n	8002348 <_printf_i+0x118>
 80023d4:	6813      	ldr	r3, [r2, #0]
 80023d6:	1d19      	adds	r1, r3, #4
 80023d8:	6011      	str	r1, [r2, #0]
 80023da:	681d      	ldr	r5, [r3, #0]
 80023dc:	6862      	ldr	r2, [r4, #4]
 80023de:	2100      	movs	r1, #0
 80023e0:	4628      	mov	r0, r5
 80023e2:	f7fd fefd 	bl	80001e0 <memchr>
 80023e6:	b108      	cbz	r0, 80023ec <_printf_i+0x1bc>
 80023e8:	1b40      	subs	r0, r0, r5
 80023ea:	6060      	str	r0, [r4, #4]
 80023ec:	6863      	ldr	r3, [r4, #4]
 80023ee:	6123      	str	r3, [r4, #16]
 80023f0:	2300      	movs	r3, #0
 80023f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f6:	e7a7      	b.n	8002348 <_printf_i+0x118>
 80023f8:	6923      	ldr	r3, [r4, #16]
 80023fa:	462a      	mov	r2, r5
 80023fc:	4639      	mov	r1, r7
 80023fe:	4630      	mov	r0, r6
 8002400:	47c0      	blx	r8
 8002402:	3001      	adds	r0, #1
 8002404:	d0aa      	beq.n	800235c <_printf_i+0x12c>
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	079b      	lsls	r3, r3, #30
 800240a:	d413      	bmi.n	8002434 <_printf_i+0x204>
 800240c:	68e0      	ldr	r0, [r4, #12]
 800240e:	9b03      	ldr	r3, [sp, #12]
 8002410:	4298      	cmp	r0, r3
 8002412:	bfb8      	it	lt
 8002414:	4618      	movlt	r0, r3
 8002416:	e7a3      	b.n	8002360 <_printf_i+0x130>
 8002418:	2301      	movs	r3, #1
 800241a:	464a      	mov	r2, r9
 800241c:	4639      	mov	r1, r7
 800241e:	4630      	mov	r0, r6
 8002420:	47c0      	blx	r8
 8002422:	3001      	adds	r0, #1
 8002424:	d09a      	beq.n	800235c <_printf_i+0x12c>
 8002426:	3501      	adds	r5, #1
 8002428:	68e3      	ldr	r3, [r4, #12]
 800242a:	9a03      	ldr	r2, [sp, #12]
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	42ab      	cmp	r3, r5
 8002430:	dcf2      	bgt.n	8002418 <_printf_i+0x1e8>
 8002432:	e7eb      	b.n	800240c <_printf_i+0x1dc>
 8002434:	2500      	movs	r5, #0
 8002436:	f104 0919 	add.w	r9, r4, #25
 800243a:	e7f5      	b.n	8002428 <_printf_i+0x1f8>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ac      	bne.n	800239a <_printf_i+0x16a>
 8002440:	7803      	ldrb	r3, [r0, #0]
 8002442:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002446:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800244a:	e76c      	b.n	8002326 <_printf_i+0xf6>
 800244c:	08002719 	.word	0x08002719
 8002450:	0800272a 	.word	0x0800272a

08002454 <_sbrk_r>:
 8002454:	b538      	push	{r3, r4, r5, lr}
 8002456:	4c06      	ldr	r4, [pc, #24]	; (8002470 <_sbrk_r+0x1c>)
 8002458:	2300      	movs	r3, #0
 800245a:	4605      	mov	r5, r0
 800245c:	4608      	mov	r0, r1
 800245e:	6023      	str	r3, [r4, #0]
 8002460:	f7fe fada 	bl	8000a18 <_sbrk>
 8002464:	1c43      	adds	r3, r0, #1
 8002466:	d102      	bne.n	800246e <_sbrk_r+0x1a>
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	b103      	cbz	r3, 800246e <_sbrk_r+0x1a>
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	bd38      	pop	{r3, r4, r5, pc}
 8002470:	20000184 	.word	0x20000184

08002474 <__sread>:
 8002474:	b510      	push	{r4, lr}
 8002476:	460c      	mov	r4, r1
 8002478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247c:	f000 f896 	bl	80025ac <_read_r>
 8002480:	2800      	cmp	r0, #0
 8002482:	bfab      	itete	ge
 8002484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002486:	89a3      	ldrhlt	r3, [r4, #12]
 8002488:	181b      	addge	r3, r3, r0
 800248a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800248e:	bfac      	ite	ge
 8002490:	6563      	strge	r3, [r4, #84]	; 0x54
 8002492:	81a3      	strhlt	r3, [r4, #12]
 8002494:	bd10      	pop	{r4, pc}

08002496 <__swrite>:
 8002496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249a:	461f      	mov	r7, r3
 800249c:	898b      	ldrh	r3, [r1, #12]
 800249e:	05db      	lsls	r3, r3, #23
 80024a0:	4605      	mov	r5, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	4616      	mov	r6, r2
 80024a6:	d505      	bpl.n	80024b4 <__swrite+0x1e>
 80024a8:	2302      	movs	r3, #2
 80024aa:	2200      	movs	r2, #0
 80024ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b0:	f000 f868 	bl	8002584 <_lseek_r>
 80024b4:	89a3      	ldrh	r3, [r4, #12]
 80024b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024be:	81a3      	strh	r3, [r4, #12]
 80024c0:	4632      	mov	r2, r6
 80024c2:	463b      	mov	r3, r7
 80024c4:	4628      	mov	r0, r5
 80024c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024ca:	f000 b817 	b.w	80024fc <_write_r>

080024ce <__sseek>:
 80024ce:	b510      	push	{r4, lr}
 80024d0:	460c      	mov	r4, r1
 80024d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d6:	f000 f855 	bl	8002584 <_lseek_r>
 80024da:	1c43      	adds	r3, r0, #1
 80024dc:	89a3      	ldrh	r3, [r4, #12]
 80024de:	bf15      	itete	ne
 80024e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80024e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024ea:	81a3      	strheq	r3, [r4, #12]
 80024ec:	bf18      	it	ne
 80024ee:	81a3      	strhne	r3, [r4, #12]
 80024f0:	bd10      	pop	{r4, pc}

080024f2 <__sclose>:
 80024f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f6:	f000 b813 	b.w	8002520 <_close_r>
	...

080024fc <_write_r>:
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4c07      	ldr	r4, [pc, #28]	; (800251c <_write_r+0x20>)
 8002500:	4605      	mov	r5, r0
 8002502:	4608      	mov	r0, r1
 8002504:	4611      	mov	r1, r2
 8002506:	2200      	movs	r2, #0
 8002508:	6022      	str	r2, [r4, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	f7fe fa68 	bl	80009e0 <_write>
 8002510:	1c43      	adds	r3, r0, #1
 8002512:	d102      	bne.n	800251a <_write_r+0x1e>
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	b103      	cbz	r3, 800251a <_write_r+0x1e>
 8002518:	602b      	str	r3, [r5, #0]
 800251a:	bd38      	pop	{r3, r4, r5, pc}
 800251c:	20000184 	.word	0x20000184

08002520 <_close_r>:
 8002520:	b538      	push	{r3, r4, r5, lr}
 8002522:	4c06      	ldr	r4, [pc, #24]	; (800253c <_close_r+0x1c>)
 8002524:	2300      	movs	r3, #0
 8002526:	4605      	mov	r5, r0
 8002528:	4608      	mov	r0, r1
 800252a:	6023      	str	r3, [r4, #0]
 800252c:	f7fe fa66 	bl	80009fc <_close>
 8002530:	1c43      	adds	r3, r0, #1
 8002532:	d102      	bne.n	800253a <_close_r+0x1a>
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	b103      	cbz	r3, 800253a <_close_r+0x1a>
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	bd38      	pop	{r3, r4, r5, pc}
 800253c:	20000184 	.word	0x20000184

08002540 <_fstat_r>:
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	4c07      	ldr	r4, [pc, #28]	; (8002560 <_fstat_r+0x20>)
 8002544:	2300      	movs	r3, #0
 8002546:	4605      	mov	r5, r0
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	f7fe fa59 	bl	8000a04 <_fstat>
 8002552:	1c43      	adds	r3, r0, #1
 8002554:	d102      	bne.n	800255c <_fstat_r+0x1c>
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	b103      	cbz	r3, 800255c <_fstat_r+0x1c>
 800255a:	602b      	str	r3, [r5, #0]
 800255c:	bd38      	pop	{r3, r4, r5, pc}
 800255e:	bf00      	nop
 8002560:	20000184 	.word	0x20000184

08002564 <_isatty_r>:
 8002564:	b538      	push	{r3, r4, r5, lr}
 8002566:	4c06      	ldr	r4, [pc, #24]	; (8002580 <_isatty_r+0x1c>)
 8002568:	2300      	movs	r3, #0
 800256a:	4605      	mov	r5, r0
 800256c:	4608      	mov	r0, r1
 800256e:	6023      	str	r3, [r4, #0]
 8002570:	f7fe fa4e 	bl	8000a10 <_isatty>
 8002574:	1c43      	adds	r3, r0, #1
 8002576:	d102      	bne.n	800257e <_isatty_r+0x1a>
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	b103      	cbz	r3, 800257e <_isatty_r+0x1a>
 800257c:	602b      	str	r3, [r5, #0]
 800257e:	bd38      	pop	{r3, r4, r5, pc}
 8002580:	20000184 	.word	0x20000184

08002584 <_lseek_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4c07      	ldr	r4, [pc, #28]	; (80025a4 <_lseek_r+0x20>)
 8002588:	4605      	mov	r5, r0
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	2200      	movs	r2, #0
 8002590:	6022      	str	r2, [r4, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	f7fe fa3e 	bl	8000a14 <_lseek>
 8002598:	1c43      	adds	r3, r0, #1
 800259a:	d102      	bne.n	80025a2 <_lseek_r+0x1e>
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	b103      	cbz	r3, 80025a2 <_lseek_r+0x1e>
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
 80025a4:	20000184 	.word	0x20000184

080025a8 <__malloc_lock>:
 80025a8:	4770      	bx	lr

080025aa <__malloc_unlock>:
 80025aa:	4770      	bx	lr

080025ac <_read_r>:
 80025ac:	b538      	push	{r3, r4, r5, lr}
 80025ae:	4c07      	ldr	r4, [pc, #28]	; (80025cc <_read_r+0x20>)
 80025b0:	4605      	mov	r5, r0
 80025b2:	4608      	mov	r0, r1
 80025b4:	4611      	mov	r1, r2
 80025b6:	2200      	movs	r2, #0
 80025b8:	6022      	str	r2, [r4, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f7fe fa02 	bl	80009c4 <_read>
 80025c0:	1c43      	adds	r3, r0, #1
 80025c2:	d102      	bne.n	80025ca <_read_r+0x1e>
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	b103      	cbz	r3, 80025ca <_read_r+0x1e>
 80025c8:	602b      	str	r3, [r5, #0]
 80025ca:	bd38      	pop	{r3, r4, r5, pc}
 80025cc:	20000184 	.word	0x20000184

080025d0 <_init>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	bf00      	nop
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr

080025dc <_fini>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	bf00      	nop
 80025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e2:	bc08      	pop	{r3}
 80025e4:	469e      	mov	lr, r3
 80025e6:	4770      	bx	lr
